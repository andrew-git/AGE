<haxe>
	<class path="ApplicationMain" params="" file="bin/cpp/linux/haxe/ApplicationMain.hx">
		<main public="1" set="method" line="12" static="1"><f a=""><e path="Void"/></f></main>
		<getAsset public="1" set="method" line="87" static="1"><f a="inName">
	<c path="String"/>
	<d/>
</f></getAsset>
	</class>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="Class" params="T" file="/usr/lib/haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="Date" params="" file="/usr/lib/haxe/std/cpp/_std/Date.hx">
		<now public="1" set="method" line="55" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="59" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="65" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<mSeconds><c path="Float"/></mSeconds>
		<getTime public="1" set="method" line="35">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method" line="39">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="41">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="43">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method" line="45">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="47">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="49">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method" line="51">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="53">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="31">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="Enum" params="T" file="/usr/lib/haxe/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="EnumValue" params="" file="/usr/lib/haxe/std/EnumValue.hx" extern="1"><haxe_doc>
	An abstract type that represents any enum value.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="com.revolugame.age.display.IEntity" params="" file="../../src/com/revolugame/age/display/IEntity.hx" interface="1">
		<visible public="1"><e path="Bool"/></visible>
		<dead public="1"><e path="Bool"/></dead>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<update public="1" set="method"><f a=""><e path="Void"/></f></update>
		<render public="1" set="method"><f a=""><e path="Void"/></f></render>
		<destroy public="1" set="method"><f a=""><e path="Void"/></f></destroy>
	</class>
	<class path="com.revolugame.age.display.Image" params="" file="../../src/com/revolugame/age/display/Image.hx">
		<implements path="com.revolugame.age.display.IEntity"/>
		<visible public="1">
			<e path="Bool"/>
			<haxe_doc>
	 * If the graphic should render
	 </haxe_doc>
		</visible>
		<dead public="1">
			<e path="Bool"/>
			<haxe_doc>
	 * If the graphic should update.
	 </haxe_doc>
		</dead>
		<x public="1">
			<c path="Float"/>
			<haxe_doc> Position </haxe_doc>
		</x>
		<y public="1"><c path="Float"/></y>
		<scale public="1">
			<c path="com.revolugame.age.system.AgePoint"/>
			<haxe_doc> Scale </haxe_doc>
		</scale>
		<rotation public="1">
			<c path="Float"/>
			<haxe_doc> Angle </haxe_doc>
		</rotation>
		<alpha public="1">
			<c path="Float"/>
			<haxe_doc> Alpha </haxe_doc>
		</alpha>
		<_spriteMap>
			<c path="com.revolugame.age.display.SpriteMap"/>
			<haxe_doc> The visual data </haxe_doc>
		</_spriteMap>
		<mirrorX public="1">
			<e path="Bool"/>
			<haxe_doc>  </haxe_doc>
		</mirrorX>
		<mirrorY public="1"><e path="Bool"/></mirrorY>
		<dirty public="1"><e path="Bool"/></dirty>
		<_position><t path="nme.geom.Point"/></_position>
		<loadGraphic public="1" set="method" line="105">
			<f a="pSrc:?pWidth:?pHeight">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="com.revolugame.age.display.SpriteMap"/>
			</f>
			<haxe_doc>
	 * Load an embedded graphic
	 </haxe_doc>
		</loadGraphic>
		<makeGraphic public="1" set="method" line="125">
			<f a="pWidth:pHeight:?pColor">
				<c path="Int"/>
				<c path="Int"/>
				<t path="nme.display.BitmapInt32"/>
				<c path="com.revolugame.age.display.SpriteMap"/>
			</f>
			<haxe_doc>
	 * Create a rectangle
	 </haxe_doc>
		</makeGraphic>
		<addAnimation public="1" set="method" line="143">
			<f a="pName:pFrames:?pFrameRate:?pLoop">
				<c path="String"/>
				<c path="Array"><c path="Int"/></c>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Add an animation to the spritemap
	 </haxe_doc>
		</addAnimation>
		<play public="1" set="method" line="149"><f a="pName">
	<c path="String"/>
	<e path="Void"/>
</f></play>
		<update public="1" set="method" line="157">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Udate animation and behaviors
	 </haxe_doc>
		</update>
		<render public="1" set="method" line="166"><f a=""><e path="Void"/></f></render>
		<drawFrame set="method" line="226">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Redraw the bitmapdata if needed
	 </haxe_doc>
		</drawFrame>
		<onScreen public="1" set="method" line="240">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
     * His on the screen and need to be rendered
     * @return Bool
     </haxe_doc>
		</onScreen>
		<destroy public="1" set="method" line="247"><f a=""><e path="Void"/></f></destroy>
		<width public="1" get="getWidth" set="null"><c path="Int"/></width>
		<getWidth set="method" line="256"><f a=""><c path="Int"/></f></getWidth>
		<height public="1" get="getHeight" set="null"><c path="Int"/></height>
		<getHeight set="method" line="259"><f a=""><c path="Int"/></f></getHeight>
		<new public="1" set="method" line="71"><f a="pX:pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * Simple graphical element
 </haxe_doc>
	</class>
	<class path="com.revolugame.age.display.Entity" params="" file="../../src/com/revolugame/age/display/Entity.hx">
		<extends path="com.revolugame.age.display.Image"/>
		<_behaviors>
			<c path="List"><c path="com.revolugame.age.core.IBehavior"/></c>
			<haxe_doc> All the behaviors of the actor </haxe_doc>
		</_behaviors>
		<_movement>
			<c path="com.revolugame.age.behaviors.MovementBehavior"/>
			<haxe_doc> Default behaviors </haxe_doc>
		</_movement>
		<_collisions><c path="com.revolugame.age.behaviors.CollisionBehavior"/></_collisions>
		<isSolid public="1">
			<e path="Bool"/>
			<haxe_doc> For the collisions detection </haxe_doc>
		</isSolid>
		<_bounds>
			<t path="flash.geom.Rectangle"/>
			<haxe_doc> </haxe_doc>
		</_bounds>
		<addDefaultBehaviors set="method" line="37"><f a=""><e path="Void"/></f></addDefaultBehaviors>
		<update public="1" set="method" line="48" override="1"><f a=""><e path="Void"/></f></update>
		<addBehavior public="1" set="method" line="59">
			<f a="b:?pEnable">
				<c path="com.revolugame.age.core.IBehavior"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
     * Add a specific behavior
     </haxe_doc>
		</addBehavior>
		<removeBehavior public="1" set="method" line="69">
			<f a="b">
				<c path="com.revolugame.age.core.IBehavior"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
    * Delete a behavior
     </haxe_doc>
		</removeBehavior>
		<getBounds public="1" set="method" line="75"><f a=""><t path="flash.geom.Rectangle"/></f></getBounds>
		<moveBy public="1" set="method" line="98">
			<f a="pX:pY:?pType:?pSweep">
				<c path="Float"/>
				<c path="Float"/>
				<d/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Moves the Entity by the amount, retaining integer values for its x and y.
	 * @param	pX		Horizontal offset.
	 * @param	pY		Vertical offset.
	 * @param	pType	An optional collision type to stop flush against upon collision.
	 * @param	pSweep	If sweeping should be used (prevents fast-moving objects from going through solidType).
	 </haxe_doc>
		</moveBy>
		<destroy public="1" set="method" line="165" override="1"><f a=""><e path="Void"/></f></destroy>
		<new public="1" set="method" line="27"><f a="?pX:?pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * Graphical element with collisions detection and behaviors
 </haxe_doc>
	</class>
	<class path="Frog" params="" file="src/Frog.hx">
		<extends path="com.revolugame.age.display.Entity"/>
		<update public="1" set="method" line="40" override="1"><f a=""><e path="Void"/></f></update>
		<new public="1" set="method" line="14"><f a="pX:pY">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<class path="neash.events.IEventDispatcher" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/IEventDispatcher.hx" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="neash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
	</class>
	<class path="neash.events.EventDispatcher" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/EventDispatcher.hx">
		<implements path="neash.events.IEventDispatcher"/>
		<nmeEventMap>
			<t path="neash.events.EventMap"/>
			<haxe_doc> @private </haxe_doc>
		</nmeEventMap>
		<nmeTarget>
			<c path="neash.events.IEventDispatcher"/>
			<haxe_doc> @private </haxe_doc>
		</nmeTarget>
		<addEventListener public="1" set="method" line="23"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<DispatchCompleteEvent public="1" set="method" line="43">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
   * Creates and dispatches a typical Event.COMPLETE
   * @private
   </haxe_doc>
		</DispatchCompleteEvent>
		<dispatchEvent public="1" set="method" line="50"><f a="event">
	<c path="neash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<DispatchIOErrorEvent public="1" set="method" line="99">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
   * Creates and dispatches a typical IOErrorEvent.IO_ERROR
   * @private
   </haxe_doc>
		</DispatchIOErrorEvent>
		<hasEventListener public="1" set="method" line="106"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method" line="120"><f a="type:listener:?capture">
	<c path="String"/>
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method" line="144"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method" line="150"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<new public="1" set="method" line="16"><f a="?target">
	<c path="neash.events.IEventDispatcher"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.IBitmapDrawable" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/IBitmapDrawable.hx" interface="1"><nmeDrawToSurface public="1" set="method">
	<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
		<d/>
		<c path="neash.geom.Matrix"/>
		<c path="neash.geom.ColorTransform"/>
		<c path="String"/>
		<c path="neash.geom.Rectangle"/>
		<e path="Bool"/>
		<e path="Void"/>
	</f>
	<haxe_doc> @private </haxe_doc>
</nmeDrawToSurface></class>
	<class path="neash.Loader" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/Loader.hx">
		<moduleInit line="18" static="1"><e path="Bool"/></moduleInit>
		<moduleName line="19" static="1"><c path="String"/></moduleName>
		<findHaxeLib public="1" set="method" line="33" static="1"><f a="inLib">
	<c path="String"/>
	<c path="String"/>
</f></findHaxeLib>
		<load public="1" set="method" line="66" static="1"><f a="func:args">
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></load>
		<loaderTrace public="1" set="method" line="128" static="1"><f a="inStr">
	<c path="String"/>
	<e path="Void"/>
</f></loaderTrace>
		<sysName set="method" line="143" static="1"><f a=""><a><substr set="null"><f a="">
	<c path="Int"/>
	<a><toLowerCase set="null"><f a=""><c path="String"/></f></toLowerCase></a>
</f></substr></a></f></sysName>
		<tryLoad public="1" set="method" line="155" static="1"><f a="inName:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></tryLoad>
	</class>
	<class path="cpp.Lib" params="" file="/usr/lib/haxe/std/cpp/Lib.hx">
		<load public="1" set="method" line="32" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Load and return a Cpp primitive from a DLL library.
	</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="44" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<d/>
			</f>
			<haxe_doc>
		Tries to load, and always returns a valid function, but the function may throw
		if called.
	</haxe_doc>
		</loadLazy>
		<rethrow public="1" set="method" line="60" static="1"><f a="inExp">
	<d/>
	<e path="Void"/>
</f></rethrow>
		<stringReference public="1" set="method" line="62" static="1"><f a="inExp">
	<d/>
	<e path="Void"/>
</f></stringReference>
		<print public="1" set="method" line="67" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output.
	</haxe_doc>
		</print>
		<haxeToNeko public="1" set="method" line="75" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic
	</haxe_doc>
		</haxeToNeko>
		<nekoToHaxe public="1" set="method" line="83" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>
		This function is used to make porting from neko to cpp easy.
		It does not need to do anything because the c-code can work with any Dynamic
	</haxe_doc>
		</nekoToHaxe>
		<println public="1" set="method" line="89" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print the specified value on the default output followed by a newline character.
	</haxe_doc>
		</println>
	</class>
	<class path="sys.io.Process" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx">
		<_run line="126" static="1"><f a=":">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<unknown/>
</f></_run>
		<_exit line="127" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></_exit>
		<_pid line="128" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></_pid>
		<_close line="129" static="1"><f a="">
	<d/>
	<unknown/>
</f></_close>
		<p><d/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<getPid public="1" set="method" line="110"><f a=""><c path="Int"/></f></getPid>
		<exitCode public="1" set="method" line="114"><f a=""><c path="Int"/></f></exitCode>
		<close public="1" set="method" line="118"><f a=""><e path="Void"/></f></close>
		<kill public="1" set="method" line="122"><f a=""><e path="Void"/></f></kill>
		<new public="1" set="method" line="103"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/lib/haxe/std/haxe/io/Output.hx">
		<_float_bytes line="253" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_float_bytes>
		<_double_bytes line="254" static="1"><f a=":">
	<c path="Float"/>
	<e path="Bool"/>
	<t path="haxe.io.BytesData"/>
</f></_double_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write line="56" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdin_write>
		<_stdin_close line="57" static="1"><f a="">
	<d/>
	<unknown/>
</f></_stdin_close>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="37" override="1"><f a=""><e path="Void"/></f></close>
		<writeByte public="1" set="method" line="42" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="47" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="32"><f a="p">
	<unknown/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/lib/haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="225" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="253" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="292" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="207"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="221"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Input" params="" file="/usr/lib/haxe/std/haxe/io/Input.hx">
		<_float_of_bytes line="266" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_float_of_bytes>
		<_double_of_bytes line="267" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<e path="Bool"/>
	<c path="Float"/>
</f></_double_of_bytes>
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="249"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="90" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stdout_read>
		<_stderr_read line="91" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></_stderr_read>
		<p><d/></p>
		<out><e path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="73" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="79" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="67"><f a="p:out">
	<unknown/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.DisplayObject" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/DisplayObject.hx">
		<extends path="neash.events.EventDispatcher"/>
		<implements path="neash.display.IBitmapDrawable"/>
		<nme_create_display_object line="724" static="1"><f a=""><unknown/></f></nme_create_display_object>
		<nme_display_object_get_graphics line="725" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_display_object_get_graphics>
		<nme_display_object_draw_to_surface line="726" static="1"><f a=":::::">
	<d/>
	<d/>
	<c path="neash.geom.Matrix"/>
	<c path="neash.geom.ColorTransform"/>
	<c path="String"/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_draw_to_surface>
		<nme_display_object_get_id line="727" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_id>
		<nme_display_object_get_x line="728" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_x>
		<nme_display_object_set_x line="729" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_x>
		<nme_display_object_get_y line="730" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_y>
		<nme_display_object_set_y line="731" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_y>
		<nme_display_object_get_scale_x line="732" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_scale_x>
		<nme_display_object_set_scale_x line="733" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_x>
		<nme_display_object_get_scale_y line="734" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_scale_y>
		<nme_display_object_set_scale_y line="735" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_scale_y>
		<nme_display_object_get_mouse_x line="736" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_mouse_x>
		<nme_display_object_get_mouse_y line="737" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_mouse_y>
		<nme_display_object_get_rotation line="738" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_rotation>
		<nme_display_object_set_rotation line="739" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_rotation>
		<nme_display_object_get_bg line="740" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_bg>
		<nme_display_object_set_bg line="741" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_display_object_set_bg>
		<nme_display_object_get_name line="742" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_display_object_get_name>
		<nme_display_object_set_name line="743" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_display_object_set_name>
		<nme_display_object_get_width line="744" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_width>
		<nme_display_object_set_width line="745" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_width>
		<nme_display_object_get_height line="746" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_height>
		<nme_display_object_set_height line="747" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_height>
		<nme_display_object_get_alpha line="748" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_display_object_get_alpha>
		<nme_display_object_set_alpha line="749" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_display_object_set_alpha>
		<nme_display_object_get_blend_mode line="750" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_display_object_get_blend_mode>
		<nme_display_object_set_blend_mode line="751" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_display_object_set_blend_mode>
		<nme_display_object_get_cache_as_bitmap line="752" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_cache_as_bitmap>
		<nme_display_object_set_cache_as_bitmap line="753" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_cache_as_bitmap>
		<nme_display_object_get_visible line="754" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_visible>
		<nme_display_object_set_visible line="755" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_visible>
		<nme_display_object_set_filters line="756" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_display_object_set_filters>
		<nme_display_object_global_to_local line="757" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Point"/>
	<unknown/>
</f></nme_display_object_global_to_local>
		<nme_display_object_local_to_global line="758" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Point"/>
	<unknown/>
</f></nme_display_object_local_to_global>
		<nme_display_object_set_scale9_grid line="759" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scale9_grid>
		<nme_display_object_set_scroll_rect line="760" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_set_scroll_rect>
		<nme_display_object_set_mask line="761" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_display_object_set_mask>
		<nme_display_object_set_matrix line="762" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Matrix"/>
	<unknown/>
</f></nme_display_object_set_matrix>
		<nme_display_object_get_matrix line="763" static="1"><f a="::">
	<d/>
	<c path="neash.geom.Matrix"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_get_matrix>
		<nme_display_object_get_color_transform line="764" static="1"><f a="::">
	<d/>
	<c path="neash.geom.ColorTransform"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_get_color_transform>
		<nme_display_object_set_color_transform line="765" static="1"><f a=":">
	<d/>
	<c path="neash.geom.ColorTransform"/>
	<unknown/>
</f></nme_display_object_set_color_transform>
		<nme_display_object_get_pixel_bounds line="766" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_display_object_get_pixel_bounds>
		<nme_display_object_hit_test_point line="767" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nme_display_object_hit_test_point>
		<alpha public="1" get="nmeGetAlpha" set="nmeSetAlpha">
			<c path="Float"/>
			<haxe_doc>
	 * The opacity of the object, as a percentage value from 0 to 1
	 </haxe_doc>
		</alpha>
		<blendMode public="1" get="nmeGetBlendMode" set="nmeSetBlendMode">
			<e path="neash.display.BlendMode"/>
			<haxe_doc>
	 * Adjusts this object blends with other objects on-screen
	 </haxe_doc>
		</blendMode>
		<cacheAsBitmap public="1" get="nmeGetCacheAsBitmap" set="nmeSetCacheAsBitmap">
			<e path="Bool"/>
			<haxe_doc>
	 * If set to true, NME will render the object using its software renderer,
	 * then it will cache the result. This can improve performance for certain
	 * types of complex objects.
	 </haxe_doc>
		</cacheAsBitmap>
		<filters public="1" get="nmeGetFilters" set="nmeSetFilters">
			<c path="Array"><d/></c>
			<haxe_doc>
	 * An array of BitmapFilters being used with this object.
	 * 
	 * If you want to add, remove or change a filter, you need to re-assign
	 * the property, like "displayObject.filters = newFilters;" 
	 </haxe_doc>
		</filters>
		<graphics public="1" get="nmeGetGraphics" set="null">
			<c path="neash.display.Graphics"/>
			<haxe_doc>
	 * Returns a reference to the nme.display.Graphics interface
	 * for this object. You can use this class to draw primitives
	 * like squares, circles, lines, curves or tiles.
	 </haxe_doc>
		</graphics>
		<height public="1" get="nmeGetHeight" set="nmeSetHeight">
			<c path="Float"/>
			<haxe_doc>
	 * The height in pixels for this object
	 </haxe_doc>
		</height>
		<mask public="1" set="nmeSetMask">
			<c path="neash.display.DisplayObject"/>
			<haxe_doc>
	 * Define a mask to control how much of this object should
	 * be visible.
	 </haxe_doc>
		</mask>
		<mouseX public="1" get="nmeGetMouseX" set="null">
			<c path="Float"/>
			<haxe_doc>
	 * Indicates the current mouse x position, using the coordinate system of
	 * this object.
	 </haxe_doc>
		</mouseX>
		<mouseY public="1" get="nmeGetMouseY" set="null">
			<c path="Float"/>
			<haxe_doc>
	 * Indicates the current mouse y position, using the coordinate system of
	 * this object.
	 </haxe_doc>
		</mouseY>
		<name public="1" get="nmeGetName" set="nmeSetName">
			<c path="String"/>
			<haxe_doc>
	 * Get or set the name for this object.
	 </haxe_doc>
		</name>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<opaqueBackground public="1" get="nmeGetBG" set="nmeSetBG">
			<t path="Null"><c path="Int"/></t>
			<haxe_doc>
	 * Set or change an opaque background color for this object.
	 </haxe_doc>
		</opaqueBackground>
		<parent public="1" get="nmeGetParent" set="null">
			<c path="neash.display.DisplayObjectContainer"/>
			<haxe_doc>
	 * If this object has been added to the display list, then this is
	 * the "parent" DisplayObjectContainer. Otherwise this will be
	 * null.
	 </haxe_doc>
		</parent>
		<rotation public="1" get="nmeGetRotation" set="nmeSetRotation">
			<c path="Float"/>
			<haxe_doc>
	 * Control the rotation of this object, in degrees.
	 </haxe_doc>
		</rotation>
		<scale9Grid public="1" get="nmeGetScale9Grid" set="nmeSetScale9Grid">
			<c path="neash.geom.Rectangle"/>
			<haxe_doc>
	 * Set a "scale 9" grid to control how the object stretches or
	 * squashes when its scale is changed.
	 </haxe_doc>
		</scale9Grid>
		<scaleX public="1" get="nmeGetScaleX" set="nmeSetScaleX">
			<c path="Float"/>
			<haxe_doc>
	 * Control the horizontal scale of the object, as a percentage value
	 </haxe_doc>
		</scaleX>
		<scaleY public="1" get="nmeGetScaleY" set="nmeSetScaleY">
			<c path="Float"/>
			<haxe_doc>
	 * Control the vertical scale of the object, as a percentage value
	 </haxe_doc>
		</scaleY>
		<scrollRect public="1" get="nmeGetScrollRect" set="nmeSetScrollRect">
			<c path="neash.geom.Rectangle"/>
			<haxe_doc>
	 * Set a "scroll rect" to control how much of the object should be rendered
	 </haxe_doc>
		</scrollRect>
		<stage public="1" get="nmeGetStage" set="null">
			<c path="neash.display.Stage"/>
			<haxe_doc>
	 * If this object has been added to the display list, which has been added
	 * to the stage, this will return the root Stage object. Otherwise, this will
	 * return null.
	 </haxe_doc>
		</stage>
		<transform public="1" get="nmeGetTransform" set="nmeSetTransform">
			<c path="neash.geom.Transform"/>
			<haxe_doc>
	 * Set the matrix and color transform for this object.
	 * 
	 * If you want to change the object's transform, you need to re-assign
	 * the property, like "displayObject.transform = newTransform;" 
	 </haxe_doc>
		</transform>
		<visible public="1" get="nmeGetVisible" set="nmeSetVisible">
			<e path="Bool"/>
			<haxe_doc>
	 * Controls whether this object is visible and rendered, or if
	 * it is invisible.
	 * 
	 * An object that has visible set to false will perform faster than
	 * and object that only has its alpha set to 0.
	 </haxe_doc>
		</visible>
		<width public="1" get="nmeGetWidth" set="nmeSetWidth">
			<c path="Float"/>
			<haxe_doc>
	 * The width in pixels for this object
	 </haxe_doc>
		</width>
		<x public="1" get="nmeGetX" set="nmeSetX">
			<c path="Float"/>
			<haxe_doc>
	 * The x position for this object, local to its parent
	 </haxe_doc>
		</x>
		<y public="1" get="nmeGetY" set="nmeSetY">
			<c path="Float"/>
			<haxe_doc>
	 * The y position for this object, local to its parent
	 </haxe_doc>
		</y>
		<nmeFilters>
			<c path="Array"><d/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeFilters>
		<nmeGraphicsCache>
			<c path="neash.display.Graphics"/>
			<haxe_doc> @private </haxe_doc>
		</nmeGraphicsCache>
		<nmeID>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</nmeID>
		<nmeParent>
			<c path="neash.display.DisplayObjectContainer"/>
			<haxe_doc> @private </haxe_doc>
		</nmeParent>
		<nmeScale9Grid>
			<c path="neash.geom.Rectangle"/>
			<haxe_doc> @private </haxe_doc>
		</nmeScale9Grid>
		<nmeScrollRect>
			<c path="neash.geom.Rectangle"/>
			<haxe_doc> @private </haxe_doc>
		</nmeScrollRect>
		<dispatchEvent public="1" set="method" line="181" override="1"><f a="event">
	<c path="neash.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<globalToLocal public="1" set="method" line="202">
			<f a="inGlobal">
				<c path="neash.geom.Point"/>
				<c path="neash.geom.Point"/>
			</f>
			<haxe_doc>
	 * Converts a point from global coordinates to local coordinates.
	 * @param	inGlobal		A point in global coordinates
	 * @return		A point in local coordinates
	 </haxe_doc>
		</globalToLocal>
		<hitTestObject public="1" set="method" line="210"><f a="object">
	<c path="neash.display.DisplayObject"/>
	<e path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method" line="246">
			<f a="x:y:?shapeFlag">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * Determines if the specified local coordinate point overlaps the
	 * contents of this object.
	 * 
	 * This method does not check for transparency, so if the object contains
	 * a bitmap image, transparent pixels will return "true" for a hit test.
	 * @param	x		The x coordinate point to test
	 * @param	y		The y coordinate point to test
	 * @param	shapeFlag		Whether to use the exact shape of this object (slower) or a bounding box
	 * @return		Whether the point intersects with the contents of this object
	 </haxe_doc>
		</hitTestPoint>
		<localToGlobal public="1" set="method" line="257">
			<f a="inLocal">
				<c path="neash.geom.Point"/>
				<c path="neash.geom.Point"/>
			</f>
			<haxe_doc>
	 * Converts a point from local coordinates to global coordinates.
	 * @param	inGlobal		A point in local coordinates
	 * @return		A point in global coordinates
	 </haxe_doc>
		</localToGlobal>
		<nmeAsInteractiveObject set="method" line="265">
			<f a=""><c path="neash.display.InteractiveObject"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeAsInteractiveObject>
		<nmeBroadcast public="1" set="method" line="271">
			<f a="inEvt">
				<c path="neash.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeBroadcast>
		<nmeDispatchEvent public="1" set="method" line="277">
			<f a="inEvt">
				<c path="neash.events.Event"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeDispatchEvent>
		<nmeDrawToSurface public="1" set="method" line="288">
			<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="neash.geom.Matrix"/>
				<c path="neash.geom.ColorTransform"/>
				<c path="String"/>
				<c path="neash.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeDrawToSurface>
		<nmeFindByID set="method" line="295">
			<f a="inID">
				<c path="Int"/>
				<c path="neash.display.DisplayObject"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeFindByID>
		<nmeFireEvent set="method" line="303">
			<f a="inEvt">
				<c path="neash.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeFireEvent>
		<nmeGetColorTransform public="1" set="method" line="355">
			<f a=""><c path="neash.geom.ColorTransform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetColorTransform>
		<nmeGetConcatenatedColorTransform public="1" set="method" line="363">
			<f a=""><c path="neash.geom.ColorTransform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetConcatenatedColorTransform>
		<nmeGetConcatenatedMatrix public="1" set="method" line="371">
			<f a=""><c path="neash.geom.Matrix"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetConcatenatedMatrix>
		<nmeGetInteractiveObjectStack public="1" set="method" line="379">
			<f a="outStack">
				<c path="Array"><c path="neash.display.InteractiveObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetInteractiveObjectStack>
		<nmeGetMatrix public="1" set="method" line="391">
			<f a=""><c path="neash.geom.Matrix"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMatrix>
		<nmeGetObjectsUnderPoint public="1" set="method" line="399">
			<f a="point:result">
				<c path="neash.geom.Point"/>
				<c path="Array"><c path="neash.display.DisplayObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetObjectsUnderPoint>
		<nmeGetPixelBounds public="1" set="method" line="406">
			<f a=""><c path="neash.geom.Rectangle"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetPixelBounds>
		<nmeOnAdded set="method" line="414">
			<f a="inObj:inIsOnStage">
				<c path="neash.display.DisplayObject"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnAdded>
		<nmeOnRemoved set="method" line="432">
			<f a="inObj:inWasOnStage">
				<c path="neash.display.DisplayObject"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnRemoved>
		<nmeSetColorTransform public="1" set="method" line="450">
			<f a="inTrans">
				<c path="neash.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetColorTransform>
		<nmeSetMatrix public="1" set="method" line="456">
			<f a="inMatrix">
				<c path="neash.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMatrix>
		<toString public="1" set="method" line="465" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
	 * @inheritDoc
	 </haxe_doc>
		</toString>
		<nmeGetAlpha set="method" line="476">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetAlpha>
		<nmeSetAlpha set="method" line="477">
			<f a="inAlpha">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetAlpha>
		<nmeGetBG set="method" line="484">
			<f a=""><t path="Null"><c path="Int"/></t></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBG>
		<nmeSetBG set="method" line="494">
			<f a="inBG">
				<t path="Null"><c path="Int"/></t>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBG>
		<nmeGetBlendMode set="method" line="505">
			<f a=""><e path="neash.display.BlendMode"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBlendMode>
		<nmeSetBlendMode set="method" line="512">
			<f a="inMode">
				<e path="neash.display.BlendMode"/>
				<e path="neash.display.BlendMode"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBlendMode>
		<nmeGetCacheAsBitmap set="method" line="519">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetCacheAsBitmap>
		<nmeSetCacheAsBitmap set="method" line="520">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetCacheAsBitmap>
		<nmeGetFilters set="method" line="527">
			<f a=""><c path="Array"><d/></c></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetFilters>
		<nmeSetFilters set="method" line="540">
			<f a="inFilters">
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetFilters>
		<nmeGetGraphics public="1" set="method" line="560">
			<f a=""><c path="neash.display.Graphics"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetGraphics>
		<nmeGetHeight set="method" line="568">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetHeight>
		<nmeSetHeight set="method" line="569">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetHeight>
		<nmeSetMask set="method" line="576">
			<f a="inObject">
				<c path="neash.display.DisplayObject"/>
				<c path="neash.display.DisplayObject"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMask>
		<nmeGetMouseX set="method" line="584">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMouseX>
		<nmeGetMouseY set="method" line="585">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMouseY>
		<nmeGetName set="method" line="588">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetName>
		<nmeSetName set="method" line="589">
			<f a="inVal">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetName>
		<nmeGetParent set="method" line="596">
			<f a=""><c path="neash.display.DisplayObjectContainer"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetParent>
		<nmeSetParent public="1" set="method" line="599">
			<f a="inParent">
				<c path="neash.display.DisplayObjectContainer"/>
				<c path="neash.display.DisplayObjectContainer"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetParent>
		<nmeGetRotation set="method" line="627">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetRotation>
		<nmeSetRotation set="method" line="628">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetRotation>
		<nmeGetScale9Grid set="method" line="635">
			<f a=""><c path="neash.geom.Rectangle"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScale9Grid>
		<nmeSetScale9Grid set="method" line="636">
			<f a="inRect">
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.Rectangle"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScale9Grid>
		<nmeGetScaleX set="method" line="644">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScaleX>
		<nmeSetScaleX set="method" line="645">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScaleX>
		<nmeGetScaleY set="method" line="652">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScaleY>
		<nmeSetScaleY set="method" line="653">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScaleY>
		<nmeGetScrollRect set="method" line="660">
			<f a=""><c path="neash.geom.Rectangle"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScrollRect>
		<nmeSetScrollRect set="method" line="661">
			<f a="inRect">
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.Rectangle"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScrollRect>
		<nmeGetStage public="1" set="method" line="669">
			<f a=""><c path="neash.display.Stage"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetStage>
		<nmeGetTransform set="method" line="678">
			<f a=""><c path="neash.geom.Transform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTransform>
		<nmeSetTransform set="method" line="679">
			<f a="inTransform">
				<c path="neash.geom.Transform"/>
				<c path="neash.geom.Transform"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTransform>
		<nmeGetVisible set="method" line="687">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetVisible>
		<nmeSetVisible set="method" line="688">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetVisible>
		<nmeGetWidth set="method" line="695">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetWidth>
		<nmeSetWidth set="method" line="696">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetWidth>
		<nmeGetX set="method" line="703">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetX>
		<nmeSetX set="method" line="704">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetX>
		<nmeGetY set="method" line="711">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetY>
		<nmeSetY set="method" line="712">
			<f a="inVal">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetY>
		<new public="1" set="method" line="170"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.InteractiveObject" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/InteractiveObject.hx">
		<extends path="neash.display.DisplayObject"/>
		<nme_display_object_set_mouse_enabled line="84" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_mouse_enabled>
		<nme_display_object_set_needs_soft_keyboard line="85" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_needs_soft_keyboard>
		<nme_display_object_get_needs_soft_keyboard line="86" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_needs_soft_keyboard>
		<nme_display_object_set_moves_for_soft_keyboard line="87" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_display_object_set_moves_for_soft_keyboard>
		<nme_display_object_get_moves_for_soft_keyboard line="88" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_get_moves_for_soft_keyboard>
		<nme_display_object_request_soft_keyboard line="89" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_display_object_request_soft_keyboard>
		<doubleClickEnabled public="1"><e path="Bool"/></doubleClickEnabled>
		<mouseEnabled public="1" get="nmeGetMouseEnabled" set="nmeSetMouseEnabled"><e path="Bool"/></mouseEnabled>
		<moveForSoftKeyboard public="1" get="nmeGetMoveForSoftKeyboard" set="nmeSetMoveForSoftKeyboard"><e path="Bool"/></moveForSoftKeyboard>
		<needsSoftKeyboard public="1" get="nmeGetNeedsSoftKeyboard" set="nmeSetNeedsSoftKeyboard"><e path="Bool"/></needsSoftKeyboard>
		<nmeMouseEnabled>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeMouseEnabled>
		<nmeAsInteractiveObject set="method" line="27" override="1">
			<f a=""><c path="neash.display.InteractiveObject"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeAsInteractiveObject>
		<requestSoftKeyboard public="1" set="method" line="33"><f a=""><e path="Bool"/></f></requestSoftKeyboard>
		<nmeGetMouseEnabled set="method" line="44">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMouseEnabled>
		<nmeSetMouseEnabled set="method" line="45">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMouseEnabled>
		<nmeSetMoveForSoftKeyboard set="method" line="53">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMoveForSoftKeyboard>
		<nmeGetMoveForSoftKeyboard set="method" line="60">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMoveForSoftKeyboard>
		<nmeSetNeedsSoftKeyboard set="method" line="66">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetNeedsSoftKeyboard>
		<nmeGetNeedsSoftKeyboard set="method" line="73">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetNeedsSoftKeyboard>
		<new public="1" set="method" line="18"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.DisplayObjectContainer" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/DisplayObjectContainer.hx">
		<extends path="neash.display.InteractiveObject"/>
		<nme_create_display_object_container line="361" static="1"><f a=""><unknown/></f></nme_create_display_object_container>
		<nme_doc_add_child line="362" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_doc_add_child>
		<nme_doc_remove_child line="363" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_remove_child>
		<nme_doc_set_child_index line="364" static="1"><f a="::">
	<d/>
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_set_child_index>
		<nme_doc_get_mouse_children line="365" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_doc_get_mouse_children>
		<nme_doc_set_mouse_children line="366" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_doc_set_mouse_children>
		<nme_doc_swap_children line="367" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_doc_swap_children>
		<mouseChildren public="1" get="nmeGetMouseChildren" set="nmeSetMouseChildren"><e path="Bool"/></mouseChildren>
		<numChildren public="1" get="nmeGetNumChildren" set="null"><c path="Int"/></numChildren>
		<tabChildren public="1" get="nmeGetTabChildren" set="nmeSetTabChildren"><e path="Bool"/></tabChildren>
		<nmeChildren>
			<c path="Array"><c path="neash.display.DisplayObject"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeChildren>
		<addChild public="1" set="method" line="29"><f a="child">
	<c path="neash.display.DisplayObject"/>
	<c path="neash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="36"><f a="child:index">
	<c path="neash.display.DisplayObject"/>
	<c path="Int"/>
	<c path="neash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method" line="44"><f a="point">
	<c path="neash.geom.Point"/>
	<e path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method" line="50"><f a="child">
	<c path="neash.display.DisplayObject"/>
	<e path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method" line="66"><f a="index">
	<c path="Int"/>
	<c path="neash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method" line="78"><f a="name">
	<c path="String"/>
	<c path="neash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method" line="87"><f a="child">
	<c path="neash.display.DisplayObject"/>
	<c path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method" line="93"><f a="point">
	<c path="neash.geom.Point"/>
	<c path="Array"><c path="neash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<nmeAddChild get="inline" set="null" line="101">
			<f a="child">
				<c path="neash.display.DisplayObject"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeAddChild>
		<nmeBroadcast public="1" set="method" line="121" override="1">
			<f a="inEvt">
				<c path="neash.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeBroadcast>
		<nmeFindByID set="method" line="146" override="1">
			<f a="inID">
				<c path="Int"/>
				<c path="neash.display.DisplayObject"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeFindByID>
		<nmeGetChildIndex set="method" line="163">
			<f a="child">
				<c path="neash.display.DisplayObject"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetChildIndex>
		<nmeGetObjectsUnderPoint public="1" set="method" line="172" override="1">
			<f a="point:result">
				<c path="neash.geom.Point"/>
				<c path="Array"><c path="neash.display.DisplayObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetObjectsUnderPoint>
		<nmeOnAdded set="method" line="181" override="1">
			<f a="inObj:inIsOnStage">
				<c path="neash.display.DisplayObject"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnAdded>
		<nmeOnRemoved set="method" line="190" override="1">
			<f a="inObj:inWasOnStage">
				<c path="neash.display.DisplayObject"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnRemoved>
		<nmeRemoveChildFromArray public="1" set="method" line="199">
			<f a="child">
				<c path="neash.display.DisplayObject"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeRemoveChildFromArray>
		<nmeSetChildIndex get="inline" set="null" line="211">
			<f a="child:index">
				<c path="neash.display.DisplayObject"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetChildIndex>
		<nmeSwapChildrenAt get="inline" set="null" line="274">
			<f a="index1:index2">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSwapChildrenAt>
		<removeChild public="1" set="method" line="289"><f a="child">
	<c path="neash.display.DisplayObject"/>
	<c path="neash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method" line="303"><f a="index">
	<c path="Int"/>
	<c path="neash.display.DisplayObject"/>
</f></removeChildAt>
		<setChildIndex public="1" set="method" line="316"><f a="child:index">
	<c path="neash.display.DisplayObject"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setChildIndex>
		<swapChildren public="1" set="method" line="322"><f a="child1:child2">
	<c path="neash.display.DisplayObject"/>
	<c path="neash.display.DisplayObject"/>
	<e path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method" line="332"><f a="index1:index2">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></swapChildrenAt>
		<nmeGetMouseChildren set="method" line="343">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMouseChildren>
		<nmeSetMouseChildren set="method" line="344">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMouseChildren>
		<nmeGetNumChildren set="method" line="351">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetNumChildren>
		<nmeGetTabChildren set="method" line="352">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTabChildren>
		<nmeSetTabChildren set="method" line="353">
			<f a="inValue">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTabChildren>
		<new public="1" set="method" line="22"><f a="inHandle:inType">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.Sprite" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Sprite.hx">
		<extends path="neash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><e path="Bool"/></buttonMode>
		<useHandCursor public="1"><e path="Bool"/></useHandCursor>
		<nmeGetType set="method" line="23">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetType>
		<startDrag public="1" set="method" line="31"><f a="?lockCenter:?bounds">
	<e path="Bool"/>
	<c path="neash.geom.Rectangle"/>
	<e path="Void"/>
</f></startDrag>
		<stopDrag public="1" set="method" line="38"><f a=""><e path="Void"/></f></stopDrag>
		<new public="1" set="method" line="17"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="com.revolugame.age.core.Engine" params="" file="../../src/com/revolugame/age/core/Engine.hx">
		<extends path="neash.display.Sprite"/>
		<_stepRate><c path="Float"/></_stepRate>
		<_last><c path="Float"/></_last>
		<_now><c path="Float"/></_now>
		<_delta><c path="Float"/></_delta>
		<create set="method" line="35"><f a="?pEvt">
	<t path="nme.events.Event"/>
	<e path="Void"/>
</f></create>
		<init public="1" set="method" line="80">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Override this, called after Engine has been added to the stage.
	 </haxe_doc>
		</init>
		<focusGained public="1" set="method" line="85">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Override this, called when game gains focus
	 </haxe_doc>
		</focusGained>
		<focusLost public="1" set="method" line="90">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Override this, called when game loses focus
	 </haxe_doc>
		</focusLost>
		<switchView set="method" line="96">
			<f a="pState">
				<c path="com.revolugame.age.core.State"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 *
 	 * @param pState
	 </haxe_doc>
		</switchView>
		<loop public="1" set="method" line="113">
			<f a="pEvt">
				<t path="nme.events.Event"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Main loop
	 </haxe_doc>
		</loop>
		<new public="1" set="method" line="20"><f a="pWidth:pHeight:pState">
	<c path="Int"/>
	<c path="Int"/>
	<c path="com.revolugame.age.core.State"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="FrogJump" params="" file="src/FrogJump.hx">
		<extends path="com.revolugame.age.core.Engine"/>
		<main public="1" set="method" line="18" static="1"><f a=""><e path="Void"/></f></main>
		<new public="1" set="method" line="12"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<class path="com.revolugame.age.display.Group" params="" file="../../src/com/revolugame/age/display/Group.hx">
		<implements path="com.revolugame.age.display.IEntity"/>
		<visible public="1"><e path="Bool"/></visible>
		<dead public="1"><e path="Bool"/></dead>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<entities public="1" set="null"><c path="Array"><c path="com.revolugame.age.display.IEntity"/></c></entities>
		<update public="1" set="method" line="23">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
     * Update all entities in the screen
     </haxe_doc>
		</update>
		<render public="1" set="method" line="41">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Render all the entities on screen
	 </haxe_doc>
		</render>
		<destroy public="1" set="method" line="58">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Clear all data
	 </haxe_doc>
		</destroy>
		<add public="1" set="method" line="72">
			<f a="pEntity">
				<c path="com.revolugame.age.display.IEntity"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Add the entity on the screen
	 * @param pEntity
	 </haxe_doc>
		</add>
		<remove public="1" set="method" line="81">
			<f a="pEntity">
				<c path="com.revolugame.age.display.IEntity"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Remove the entity from the screen
	 * @param pEntity
	 </haxe_doc>
		</remove>
		<numChildren public="1" get="getNumChildren" set="null"><c path="Int"/></numChildren>
		<getNumChildren set="method" line="88"><f a=""><c path="Int"/></f></getNumChildren>
		<new public="1" set="method" line="13"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="com.revolugame.age.core.State" params="" file="../../src/com/revolugame/age/core/State.hx">
		<extends path="com.revolugame.age.display.Group"/>
		<create public="1" set="method" line="13"><f a=""><e path="Void"/></f></create>
		<new public="1" set="method" line="8"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="GameState" params="" file="src/GameState.hx">
		<extends path="com.revolugame.age.core.State"/>
		<create public="1" set="method" line="14" override="1"><f a=""><e path="Void"/></f></create>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<class path="Hash" params="T" file="/usr/lib/haxe/std/cpp/_std/Hash.hx">
		<__Internal><d/></__Internal>
		<set public="1" set="method" line="33">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="37">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="41">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="45">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="61">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="76">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="29">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="IntHash" params="T" file="/usr/lib/haxe/std/cpp/_std/IntHash.hx">
		<h><d/></h>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="IntIter" params="" file="/usr/lib/haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="List" params="T" file="/usr/lib/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<class path="Math" params="" file="/usr/lib/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/usr/lib/haxe/std/cpp/_std/Reflect.hx">
		<hasField public="1" set="method" line="29" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" set="method" line="33" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" get="inline" set="null" line="37" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<getProperty public="1" get="inline" set="null" line="42" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Similar to field but also supports property (might be slower).
	</haxe_doc>
		</getProperty>
		<setProperty public="1" get="inline" set="null" line="46" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Similar to setField but also supports property (might be slower).
	</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" line="51" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="58" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="65" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" line="69" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" line="73" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" line="81" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" line="88" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" line="93" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" line="104" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="59">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="75">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="89">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="StringTools" params="" file="/usr/lib/haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
	<class path="Sys" params="" file="/usr/lib/haxe/std/cpp/_std/Sys.hx">
		<print public="1" set="method" line="28" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print any value on the standard output.
	</haxe_doc>
		</print>
		<println public="1" set="method" line="32" static="1">
			<f a="v">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Print any value on the standard output, followed by a newline
	</haxe_doc>
		</println>
		<stdin public="1" set="method" line="37" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>
		Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See [getChar] for an alternative.
	</haxe_doc>
		</stdin>
		<stdout public="1" set="method" line="41" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>
		Returns the process standard output on which you can write.
	</haxe_doc>
		</stdout>
		<stderr public="1" set="method" line="45" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>
		Returns the process standard error on which you can write.
	</haxe_doc>
		</stderr>
		<getChar public="1" set="method" line="49" static="1">
			<f a="echo">
				<e path="Bool"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Read a single input character from the standard input (without blocking) and returns it. Setting [echo] to true will also display it on the output.
	</haxe_doc>
		</getChar>
		<args public="1" set="method" line="53" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>
		Returns all the arguments that were passed by the commandline.
	</haxe_doc>
		</args>
		<getEnv public="1" set="method" line="57" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the value of the given environment variable.
	</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" line="64" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the value of the given environment variable.
	</haxe_doc>
		</putEnv>
		<sleep public="1" set="method" line="68" static="1">
			<f a="seconds">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Suspend the current execution for the given time (in seconds).
	</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" line="72" static="1">
			<f a="loc">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Change the current time locale, which will affect [DateTools.format] date formating.
		Returns true if the locale was successfully changed
	</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" line="76" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Get the current working directory (usually the one in which the program was started)
	</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Change the current working directory.
	</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" line="84" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.
	</haxe_doc>
		</systemName>
		<escapeArgument set="method" line="88" static="1"><f a="arg">
	<c path="String"/>
	<c path="String"/>
</f></escapeArgument>
		<command public="1" set="method" line="102" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Run the given command with the list of arguments. The command output will be printed on the same output as the current process.
		The current process will block until the command terminates and it will return the command result (0 if there was no error).
		Read the [sys.io.Process] api for a more complete way to start background processes.
	</haxe_doc>
		</command>
		<exit public="1" set="method" line="111" static="1">
			<f a="code">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Exit the current process with the given error code.
	</haxe_doc>
		</exit>
		<time public="1" set="method" line="115" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Gives the most precise timestamp value (in seconds).
	</haxe_doc>
		</time>
		<cpuTime public="1" set="method" line="119" static="1">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.
	</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" line="123" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the path to the current executable that we are running.
	</haxe_doc>
		</executablePath>
		<environment public="1" set="method" line="127" static="1">
			<f a=""><c path="Hash"><c path="String"/></c></f>
			<haxe_doc>
		Returns the whole environement variables.
	</haxe_doc>
		</environment>
		<get_env line="138" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></get_env>
		<put_env line="139" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></put_env>
		<_sleep line="140" static="1"><f a="">
	<c path="Float"/>
	<unknown/>
</f></_sleep>
		<set_time_locale line="141" static="1"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></set_time_locale>
		<get_cwd line="142" static="1"><f a=""><c path="String"/></f></get_cwd>
		<set_cwd line="143" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></set_cwd>
		<sys_string line="144" static="1"><f a=""><c path="String"/></f></sys_string>
		<sys_command line="145" static="1"><f a="">
	<c path="String"/>
	<c path="Int"/>
</f></sys_command>
		<sys_exit line="146" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></sys_exit>
		<sys_time line="147" static="1"><f a=""><c path="Float"/></f></sys_time>
		<sys_cpu_time line="148" static="1"><f a=""><c path="Float"/></f></sys_cpu_time>
		<sys_exe_path line="149" static="1"><f a=""><c path="String"/></f></sys_exe_path>
		<sys_env line="150" static="1"><f a=""><c path="Array"><c path="String"/></c></f></sys_env>
		<file_stdin line="152" static="1"><f a=""><unknown/></f></file_stdin>
		<file_stdout line="153" static="1"><f a=""><unknown/></f></file_stdout>
		<file_stderr line="154" static="1"><f a=""><unknown/></f></file_stderr>
		<getch line="156" static="1"><f a="">
	<e path="Bool"/>
	<c path="Int"/>
</f></getch>
		<haxe_doc>
	This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.
</haxe_doc>
	</class>
	<enum path="ValueType" params="" file="/usr/lib/haxe/std/cpp/_std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
	</enum>
	<class path="Type" params="" file="/usr/lib/haxe/std/cpp/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="39" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="50" static="1">
			<f a="o">
				<c path="EnumValue"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="56" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="60" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="66" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="70" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="77" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="84" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="90" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="94" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="100" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="106" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" line="110" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="114" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="118" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="134" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="138" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="142" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" get="inline" set="null" line="147" static="1">
			<f a="e">
				<c path="EnumValue"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" line="151" static="1">
			<f a="e">
				<c path="Enum"><c path="allEnums.T"/></c>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>
		Returns the list of all enum values that don't take any parameter.
	</haxe_doc>
		</allEnums>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<class path="haxe.Public" params="" file="/usr/lib/haxe/std/haxe/Public.hx" interface="1"><haxe_doc>
	When implementing this interface, all default fields access for the class and
	subclasses becomes [public] instead of [private].
</haxe_doc></class>
	<class path="com.revolugame.age.AgeData" params="" file="../../src/com/revolugame/age/AgeData.hx">
		<implements path="haxe.Public"/>
		<elapsed public="1" line="12" static="1">
			<c path="Float"/>
			<haxe_doc>
	 * Time elapsed since the last frame
	 </haxe_doc>
		</elapsed>
		<VERSION public="1" get="inline" set="null" line="17" static="1">
			<c path="String"/>
			<haxe_doc>
	 * The AGE major version.
	 </haxe_doc>
		</VERSION>
		<engine public="1" static="1"><c path="com.revolugame.age.core.Engine"/></engine>
		<state public="1" static="1"><c path="com.revolugame.age.core.State"/></state>
		<camera public="1" static="1"><t path="com.revolugame.age.core.Camera"/></camera>
		<stageWidth public="1" static="1"><c path="Int"/></stageWidth>
		<stageHeight public="1" static="1"><c path="Int"/></stageHeight>
	</class>
	<class path="com.revolugame.age.AgeUtils" params="" file="../../src/com/revolugame/age/AgeUtils.hx"><sign public="1" get="inline" set="null" line="11" static="1">
	<f a="value">
		<c path="Float"/>
		<c path="Int"/>
	</f>
	<haxe_doc><![CDATA[
	 * Finds the sign of the provided value.
	 * @param	value		The Float to evaluate.
	 * @return	1 if value > 0, -1 if value < 0, and 0 when value == 0.
	 ]]></haxe_doc>
</sign></class>
	<class path="com.revolugame.age.core.IBehavior" params="" file="../../src/com/revolugame/age/core/IBehavior.hx" interface="1">
		<_entity><c path="com.revolugame.age.display.Entity"/></_entity>
		<enabled public="1" set="null"><e path="Bool"/></enabled>
		<update public="1" set="method"><f a=""><e path="Void"/></f></update>
		<enable public="1" set="method"><f a=""><e path="Void"/></f></enable>
		<disable public="1" set="method"><f a=""><e path="Void"/></f></disable>
		<destroy public="1" set="method"><f a=""><e path="Void"/></f></destroy>
	</class>
	<class path="com.revolugame.age.behaviors.CollisionBehavior" params="" file="../../src/com/revolugame/age/behaviors/CollisionBehavior.hx">
		<implements path="com.revolugame.age.core.IBehavior"/>
		<_entity><c path="com.revolugame.age.display.Entity"/></_entity>
		<enabled public="1" set="null"><e path="Bool"/></enabled>
		<update public="1" set="method" line="20"><f a=""><e path="Void"/></f></update>
		<collideWith public="1" set="method" line="25"><f a="pType:pX:pY">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="com.revolugame.age.display.Entity"/>
</f></collideWith>
		<collide public="1" set="method" line="52"><f a="pEntity1:pEntity2">
	<c path="com.revolugame.age.display.Entity"/>
	<c path="com.revolugame.age.display.Entity"/>
	<e path="Bool"/>
</f></collide>
		<collidePoint public="1" set="method" line="60"><f a="pX1:pY1:pRect">
	<c path="Float"/>
	<c path="Float"/>
	<t path="flash.geom.Rectangle"/>
	<e path="Bool"/>
</f></collidePoint>
		<enable public="1" set="method" line="65"><f a=""><e path="Void"/></f></enable>
		<disable public="1" set="method" line="70"><f a=""><e path="Void"/></f></disable>
		<destroy public="1" set="method" line="75"><f a=""><e path="Void"/></f></destroy>
		<new public="1" set="method" line="15"><f a="pEntity">
	<c path="com.revolugame.age.display.Entity"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="com.revolugame.age.behaviors.MovementBehavior" params="" file="../../src/com/revolugame/age/behaviors/MovementBehavior.hx">
		<implements path="com.revolugame.age.core.IBehavior"/>
		<_entity><c path="com.revolugame.age.display.Entity"/></_entity>
		<enabled public="1" set="null"><e path="Bool"/></enabled>
		<velocity public="1"><c path="com.revolugame.age.system.AgePoint"/></velocity>
		<acceleration public="1"><c path="com.revolugame.age.system.AgePoint"/></acceleration>
		<friction public="1"><c path="com.revolugame.age.system.AgePoint"/></friction>
		<maxVelocity public="1"><c path="com.revolugame.age.system.AgePoint"/></maxVelocity>
		<gravity public="1"><c path="com.revolugame.age.system.AgePoint"/></gravity>
		<moveSpeed public="1"><c path="Float"/></moveSpeed>
		<onGround public="1" set="null"><e path="Bool"/></onGround>
		<update public="1" set="method" line="37"><f a=""><e path="Void"/></f></update>
		<updatePosition public="1" set="method" line="49"><f a="pX:pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></updatePosition>
		<setPosition public="1" set="method" line="55"><f a="pX:pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setPosition>
		<moveTop public="1" set="method" line="61"><f a=""><e path="Void"/></f></moveTop>
		<moveBottom public="1" set="method" line="66"><f a=""><e path="Void"/></f></moveBottom>
		<moveLeft public="1" set="method" line="71"><f a=""><e path="Void"/></f></moveLeft>
		<moveRight public="1" set="method" line="76"><f a=""><e path="Void"/></f></moveRight>
		<jump public="1" set="method" line="84">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
     *
     </haxe_doc>
		</jump>
		<idle public="1" set="method" line="90"><f a=""><e path="Bool"/></f></idle>
		<stopMovementY public="1" set="method" line="95"><f a="pE">
	<c path="com.revolugame.age.display.Entity"/>
	<e path="Void"/>
</f></stopMovementY>
		<stopMovementX public="1" set="method" line="106"><f a="pE">
	<c path="com.revolugame.age.display.Entity"/>
	<e path="Void"/>
</f></stopMovementX>
		<applyGravity set="method" line="114"><f a=""><e path="Void"/></f></applyGravity>
		<checkMaxVelocity set="method" line="121"><f a=""><e path="Void"/></f></checkMaxVelocity>
		<applyVelocity set="method" line="130"><f a=""><e path="Void"/></f></applyVelocity>
		<enable public="1" set="method" line="137"><f a=""><e path="Void"/></f></enable>
		<disable public="1" set="method" line="142"><f a=""><e path="Void"/></f></disable>
		<destroy public="1" set="method" line="147"><f a=""><e path="Void"/></f></destroy>
		<new public="1" set="method" line="23"><f a="pEntity">
	<c path="com.revolugame.age.display.Entity"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="com.revolugame.age.core.Camera" params="" file="../../src/com/revolugame/age/core/Camera.hx">
		<c path="com.revolugame.age.core.SpriteCamera"/>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</typedef>
	<class path="com.revolugame.age.core.ICamera" params="" file="../../src/com/revolugame/age/core/ICamera.hx" interface="1">
		<position public="1">
			<c path="com.revolugame.age.system.AgePoint"/>
			<haxe_doc>
     * the top-left position of the camera in the World
     </haxe_doc>
		</position>
		<antialiasing public="1">
			<e path="Bool"/>
			<haxe_doc>
	 * smoothing for tileSheet
	 </haxe_doc>
		</antialiasing>
		<clear public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
     * Clear the screen to white
     </haxe_doc>
		</clear>
	</class>
	<class path="com.revolugame.age.core.SpriteCamera" params="" file="../../src/com/revolugame/age/core/SpriteCamera.hx">
		<implements path="com.revolugame.age.core.ICamera"/>
		<position public="1">
			<c path="com.revolugame.age.system.AgePoint"/>
			<haxe_doc>
     * the top-left position of the camera in the World
     </haxe_doc>
		</position>
		<antialiasing public="1">
			<e path="Bool"/>
			<haxe_doc>
	 * smoothing for tileSheet
	 </haxe_doc>
		</antialiasing>
		<screen public="1" set="null"><t path="nme.display.Sprite"/></screen>
		<clear public="1" set="method" line="27"><f a=""><e path="Void"/></f></clear>
		<new public="1" set="method" line="20"><f a="pWidth:pHeight:?pSmoothing">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="com.revolugame.age.display.SpriteMap" params="" file="../../src/com/revolugame/age/display/SpriteMap.hx">
		<rects public="1">
			<c path="Array"><t path="nme.geom.Rectangle"/></c>
			<haxe_doc> Array of rectangles of each parts of the sprite </haxe_doc>
		</rects>
		<cols public="1" set="null">
			<c path="Int"/>
			<haxe_doc> Data needed for render </haxe_doc>
		</cols>
		<rows public="1" set="null"><c path="Int"/></rows>
		<width public="1" set="null">
			<c path="Int"/>
			<haxe_doc> Size </haxe_doc>
		</width>
		<height public="1" set="null"><c path="Int"/></height>
		<pixels public="1" set="null">
			<t path="nme.display.BitmapData"/>
			<haxe_doc> </haxe_doc>
		</pixels>
		<_anims>
			<c path="Hash"><c path="com.revolugame.age.system.Animation"/></c>
			<haxe_doc>  </haxe_doc>
		</_anims>
		<_anim><c path="com.revolugame.age.system.Animation"/></_anim>
		<_index>
			<c path="Int"/>
			<haxe_doc> index of current sprite to be used in animation </haxe_doc>
		</_index>
		<_frame><c path="Int"/></_frame>
		<_timer><c path="Float"/></_timer>
		<tilesheetdata public="1" set="null"><c path="com.revolugame.age.system.TileSheetData"/></tilesheetdata>
		<complete public="1">
			<e path="Bool"/>
			<haxe_doc>
	 * If the animation has stopped.
	 </haxe_doc>
		</complete>
		<rate public="1">
			<c path="Float"/>
			<haxe_doc>
	 * Animation speed factor, alter this to speed up/slow down all animations.
	 </haxe_doc>
		</rate>
		<loadGraphic public="1" set="method" line="64"><f a="pSrc:?pWidth:?pHeight">
	<c path="String"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></loadGraphic>
		<initGraphicsData set="method" line="84">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * Initialize everythings needed for graphics
	 </haxe_doc>
		</initGraphicsData>
		<makeGraphic public="1" set="method" line="118"><f a="pWidth:pHeight:?pColor">
	<c path="Int"/>
	<c path="Int"/>
	<t path="nme.display.BitmapInt32"/>
	<e path="Void"/>
</f></makeGraphic>
		<update public="1" set="method" line="150">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
	 * Animation
	 * @method update
	 * @return if the index has been updated
	 </haxe_doc>
		</update>
		<add public="1" set="method" line="194">
			<f a="pName:pFrames:?pFrameRate:?pLoop">
				<c path="String"/>
				<c path="Array"><c path="Int"/></c>
				<c path="Float"/>
				<e path="Bool"/>
				<c path="com.revolugame.age.system.Animation"/>
			</f>
			<haxe_doc>
	 * Add an Animation.
	 * @param	pName		Name of the animation
	 * @param	pFrames		Array of frame indices to animate through
	 * @param	pFrameRate	Animation speed
	 * @param	pLoop		If the animation should loop
	 * @return	A new Animation object
	 </haxe_doc>
		</add>
		<play public="1" set="method" line="212">
			<f a="?pName:?pReset">
				<c path="String"/>
				<e path="Bool"/>
				<c path="com.revolugame.age.system.Animation"/>
			</f>
			<haxe_doc>
	 * Plays an animation.
	 * @param	name		Name of the animation to play.
	 * @param	reset		If the animation should force-restart if it is already playing.
	 * @return	Anim object representing the played animation.
	 </haxe_doc>
		</play>
		<getRect public="1" set="method" line="233">
			<f a=""><t path="nme.geom.Rectangle"/></f>
			<haxe_doc>
	 * @return the bounding rectangle
	 </haxe_doc>
		</getRect>
		<getFrameId public="1" set="method" line="238"><f a=""><c path="Int"/></f></getFrameId>
		<destroy public="1" set="method" line="243"><f a=""><e path="Void"/></f></destroy>
		<new public="1" set="method" line="59"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<enum path="com.revolugame.age.enums.DirectionsEnum" params="" file="../../src/com/revolugame/age/enums/DirectionsEnum.hx">
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM/>
	</enum>
	<class path="com.revolugame.age.managers.AssetsManager" params="" file="../../src/com/revolugame/age/managers/AssetsManager.hx">
		<_bitmaps line="13" static="1">
			<c path="Hash"><t path="nme.display.BitmapData"/></c>
			<haxe_doc> Bitmap storage </haxe_doc>
		</_bitmaps>
		<getBitmap public="1" set="method" line="18" static="1">
			<f a="pSrc">
				<d/>
				<t path="nme.display.BitmapData"/>
			</f>
			<haxe_doc>
	 * Create the bitmap if needed
	 </haxe_doc>
		</getBitmap>
		<createBitmap public="1" set="method" line="41" static="1">
			<f a="pWidth:pHeight:pColor:?pCacheName">
				<c path="Int"/>
				<c path="Int"/>
				<t path="nme.display.BitmapInt32"/>
				<c path="String"/>
				<t path="nme.display.BitmapData"/>
			</f>
			<haxe_doc>
	 * Create a new BitmapData object
	 * @param pWidth
	 * @param pHeight
	 * @param pColor
	 * @param pCacheName Force the cache name
	 </haxe_doc>
		</createBitmap>
	</class>
	<class path="com.revolugame.age.managers.TileSheetManager" params="" file="../../src/com/revolugame/age/managers/TileSheetManager.hx">
		<tilesheetsData public="1" line="12" static="1"><c path="Array"><c path="com.revolugame.age.system.TileSheetData"/></c></tilesheetsData>
		<addTileSheet public="1" set="method" line="18" static="1">
			<f a="bitmapData">
				<t path="nme.display.BitmapData"/>
				<c path="com.revolugame.age.system.TileSheetData"/>
			</f>
			<haxe_doc>
	 * Adds new tileSheet to manager and returns it
	 * If manager already contains tileSheet with the same bitmapData then it returns this tileSheetData object 
	 </haxe_doc>
		</addTileSheet>
		<removeTileSheet public="1" set="method" line="29" static="1"><f a="data">
	<c path="com.revolugame.age.system.TileSheetData"/>
	<e path="Void"/>
</f></removeTileSheet>
		<containsTileSheet public="1" set="method" line="42" static="1"><f a="bitmapData">
	<t path="nme.display.BitmapData"/>
	<e path="Bool"/>
</f></containsTileSheet>
		<getTileSheet public="1" set="method" line="50" static="1"><f a="bitmapData">
	<t path="nme.display.BitmapData"/>
	<c path="com.revolugame.age.system.TileSheetData"/>
</f></getTileSheet>
	</class>
	<class path="com.revolugame.age.system.AgePoint" params="" file="../../src/com/revolugame/age/system/AgePoint.hx">
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<new public="1" set="method" line="12"><f a="?pX:?pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<class path="com.revolugame.age.system.Animation" params="" file="../../src/com/revolugame/age/system/Animation.hx">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>
	 * Name of the animation.
	 </haxe_doc>
		</name>
		<frames public="1" set="null">
			<c path="Array"><c path="Int"/></c>
			<haxe_doc>
	 * Array of frame indices to animate.
	 </haxe_doc>
		</frames>
		<frameRate public="1" set="null">
			<c path="Float"/>
			<haxe_doc>
	 * Animation speed.
	 </haxe_doc>
		</frameRate>
		<frameCount public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
	 * Amount of frames in the animation.
	 </haxe_doc>
		</frameCount>
		<loop public="1" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * If the animation loops.
	 </haxe_doc>
		</loop>
		<_parent><c path="com.revolugame.age.display.SpriteMap"/></_parent>
		<play public="1" set="method" line="58">
			<f a="?reset">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Plays the animation.
	 * @param	reset		If the animation should force-restart if it is already playing.
	 </haxe_doc>
		</play>
		<parent public="1" get="null" set="setParent"><c path="com.revolugame.age.display.SpriteMap"/></parent>
		<setParent set="method" line="64"><f a="value">
	<c path="com.revolugame.age.display.SpriteMap"/>
	<c path="com.revolugame.age.display.SpriteMap"/>
</f></setParent>
		<new public="1" set="method" line="45">
			<f a="name:frames:?frameRate:?loop">
				<c path="String"/>
				<c path="Array"><c path="Int"/></c>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Constructor.
	 * @param	name		Animation name.
	 * @param	frames		Array of frame indices to animate.
	 * @param	frameRate	Animation speed.
	 * @param	loop		If the animation should loop.
	 </haxe_doc>
		</new>
		<haxe_doc>
 * Template used by Spritemap to define animations. Don't create
 * these yourself, instead you can fetch them with Spritemap's add().
 </haxe_doc>
	</class>
	<class path="com.revolugame.age.system.Input" params="" file="../../src/com/revolugame/age/system/Input.hx">
		<lastKey public="1" static="1"><c path="Int"/></lastKey>
		<keyString public="1" line="13" static="1"><c path="String"/></keyString>
		<_key line="15" static="1"><c path="Array"><e path="Bool"/></c></_key>
		<_keyNum line="16" static="1"><c path="Int"/></_keyNum>
		<_press line="17" static="1"><c path="Array"><c path="Int"/></c></_press>
		<_pressNum line="18" static="1"><c path="Int"/></_pressNum>
		<_release line="19" static="1"><c path="Array"><c path="Int"/></c></_release>
		<_releaseNum line="20" static="1"><c path="Int"/></_releaseNum>
		<_control line="21" static="1"><c path="Hash"><c path="Array"><c path="Int"/></c></c></_control>
		<kKeyStringMax get="inline" set="null" line="23" static="1"><c path="Int"/></kKeyStringMax>
		<init public="1" set="method" line="25" static="1"><f a="pStage">
	<t path="flash.display.Stage"/>
	<e path="Void"/>
</f></init>
		<onKeyDown set="method" line="31" static="1"><f a="pEvt">
	<t path="flash.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyDown>
		<onKeyUp set="method" line="58" static="1"><f a="pEvt">
	<t path="flash.events.KeyboardEvent"/>
	<e path="Void"/>
</f></onKeyUp>
		<indexOf set="method" line="75" static="1">
			<f a="a:v">
				<c path="Array"><c path="Int"/></c>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
	 * Copy of Lambda.indexOf for speed/memory reasons
	 * @param	a array to use
	 * @param	v value to find index of
	 * @return	index of value in the array
	 </haxe_doc>
		</indexOf>
		<update public="1" set="method" line="86" static="1"><f a=""><e path="Void"/></f></update>
		<define public="1" set="method" line="99" static="1">
			<f a="name:keys">
				<c path="String"/>
				<c path="Array"><c path="Int"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Defines a new input.
	 * @param	name		String to map the input to.
	 * @param	keys		The keys to use for the Input.
	 </haxe_doc>
		</define>
		<check public="1" set="method" line="109" static="1">
			<f a="input">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * If the input or key is held down.
	 * @param	input		An input name or key to check for.
	 * @return	True or false.
	 </haxe_doc>
		</check>
		<pressed public="1" set="method" line="134" static="1">
			<f a="input">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * If the input or key was pressed this frame.
	 * @param	input		An input name or key to check for.
	 * @return	True or false.
	 </haxe_doc>
		</pressed>
		<released public="1" set="method" line="154" static="1">
			<f a="input">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
	 * If the input or key was released this frame.
	 * @param	input		An input name or key to check for.
	 * @return	True or false.
	 </haxe_doc>
		</released>
		<haxe_doc>
 * From HaxePunk
 </haxe_doc>
	</class>
	<class path="com.revolugame.age.system.Key" params="" file="../../src/com/revolugame/age/system/Key.hx">
		<ANY public="1" get="inline" set="null" line="5" static="1"><c path="Int"/></ANY>
		<LEFT public="1" get="inline" set="null" line="7" static="1"><c path="Int"/></LEFT>
		<UP public="1" get="inline" set="null" line="8" static="1"><c path="Int"/></UP>
		<RIGHT public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></RIGHT>
		<DOWN public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></DOWN>
		<ENTER public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></ENTER>
		<COMMAND public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></COMMAND>
		<CONTROL public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></CONTROL>
		<SPACE public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></SPACE>
		<SHIFT public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></SHIFT>
		<BACKSPACE public="1" get="inline" set="null" line="17" static="1"><c path="Int"/></BACKSPACE>
		<CAPS_LOCK public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></CAPS_LOCK>
		<DELETE public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></DELETE>
		<END public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></END>
		<ESCAPE public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></ESCAPE>
		<HOME public="1" get="inline" set="null" line="22" static="1"><c path="Int"/></HOME>
		<INSERT public="1" get="inline" set="null" line="23" static="1"><c path="Int"/></INSERT>
		<TAB public="1" get="inline" set="null" line="24" static="1"><c path="Int"/></TAB>
		<PAGE_DOWN public="1" get="inline" set="null" line="25" static="1"><c path="Int"/></PAGE_DOWN>
		<PAGE_UP public="1" get="inline" set="null" line="26" static="1"><c path="Int"/></PAGE_UP>
		<LEFT_SQUARE_BRACKET public="1" get="inline" set="null" line="27" static="1"><c path="Int"/></LEFT_SQUARE_BRACKET>
		<RIGHT_SQUARE_BRACKET public="1" get="inline" set="null" line="28" static="1"><c path="Int"/></RIGHT_SQUARE_BRACKET>
		<A public="1" get="inline" set="null" line="59" static="1"><c path="Int"/></A>
		<B public="1" get="inline" set="null" line="60" static="1"><c path="Int"/></B>
		<C public="1" get="inline" set="null" line="61" static="1"><c path="Int"/></C>
		<D public="1" get="inline" set="null" line="62" static="1"><c path="Int"/></D>
		<E public="1" get="inline" set="null" line="63" static="1"><c path="Int"/></E>
		<F public="1" get="inline" set="null" line="64" static="1"><c path="Int"/></F>
		<G public="1" get="inline" set="null" line="65" static="1"><c path="Int"/></G>
		<H public="1" get="inline" set="null" line="66" static="1"><c path="Int"/></H>
		<I public="1" get="inline" set="null" line="67" static="1"><c path="Int"/></I>
		<J public="1" get="inline" set="null" line="68" static="1"><c path="Int"/></J>
		<K public="1" get="inline" set="null" line="69" static="1"><c path="Int"/></K>
		<L public="1" get="inline" set="null" line="70" static="1"><c path="Int"/></L>
		<M public="1" get="inline" set="null" line="71" static="1"><c path="Int"/></M>
		<N public="1" get="inline" set="null" line="72" static="1"><c path="Int"/></N>
		<O public="1" get="inline" set="null" line="73" static="1"><c path="Int"/></O>
		<P public="1" get="inline" set="null" line="74" static="1"><c path="Int"/></P>
		<Q public="1" get="inline" set="null" line="75" static="1"><c path="Int"/></Q>
		<R public="1" get="inline" set="null" line="76" static="1"><c path="Int"/></R>
		<S public="1" get="inline" set="null" line="77" static="1"><c path="Int"/></S>
		<T public="1" get="inline" set="null" line="78" static="1"><c path="Int"/></T>
		<U public="1" get="inline" set="null" line="79" static="1"><c path="Int"/></U>
		<V public="1" get="inline" set="null" line="80" static="1"><c path="Int"/></V>
		<W public="1" get="inline" set="null" line="81" static="1"><c path="Int"/></W>
		<X public="1" get="inline" set="null" line="82" static="1"><c path="Int"/></X>
		<Y public="1" get="inline" set="null" line="83" static="1"><c path="Int"/></Y>
		<Z public="1" get="inline" set="null" line="84" static="1"><c path="Int"/></Z>
		<F1 public="1" get="inline" set="null" line="87" static="1"><c path="Int"/></F1>
		<F2 public="1" get="inline" set="null" line="88" static="1"><c path="Int"/></F2>
		<F3 public="1" get="inline" set="null" line="89" static="1"><c path="Int"/></F3>
		<F4 public="1" get="inline" set="null" line="90" static="1"><c path="Int"/></F4>
		<F5 public="1" get="inline" set="null" line="91" static="1"><c path="Int"/></F5>
		<F6 public="1" get="inline" set="null" line="92" static="1"><c path="Int"/></F6>
		<F7 public="1" get="inline" set="null" line="93" static="1"><c path="Int"/></F7>
		<F8 public="1" get="inline" set="null" line="94" static="1"><c path="Int"/></F8>
		<F9 public="1" get="inline" set="null" line="95" static="1"><c path="Int"/></F9>
		<F10 public="1" get="inline" set="null" line="96" static="1"><c path="Int"/></F10>
		<F11 public="1" get="inline" set="null" line="97" static="1"><c path="Int"/></F11>
		<F12 public="1" get="inline" set="null" line="98" static="1"><c path="Int"/></F12>
		<F13 public="1" get="inline" set="null" line="99" static="1"><c path="Int"/></F13>
		<F14 public="1" get="inline" set="null" line="100" static="1"><c path="Int"/></F14>
		<F15 public="1" get="inline" set="null" line="101" static="1"><c path="Int"/></F15>
		<DIGIT_0 public="1" get="inline" set="null" line="103" static="1"><c path="Int"/></DIGIT_0>
		<DIGIT_1 public="1" get="inline" set="null" line="104" static="1"><c path="Int"/></DIGIT_1>
		<DIGIT_2 public="1" get="inline" set="null" line="105" static="1"><c path="Int"/></DIGIT_2>
		<DIGIT_3 public="1" get="inline" set="null" line="106" static="1"><c path="Int"/></DIGIT_3>
		<DIGIT_4 public="1" get="inline" set="null" line="107" static="1"><c path="Int"/></DIGIT_4>
		<DIGIT_5 public="1" get="inline" set="null" line="108" static="1"><c path="Int"/></DIGIT_5>
		<DIGIT_6 public="1" get="inline" set="null" line="109" static="1"><c path="Int"/></DIGIT_6>
		<DIGIT_7 public="1" get="inline" set="null" line="110" static="1"><c path="Int"/></DIGIT_7>
		<DIGIT_8 public="1" get="inline" set="null" line="111" static="1"><c path="Int"/></DIGIT_8>
		<DIGIT_9 public="1" get="inline" set="null" line="112" static="1"><c path="Int"/></DIGIT_9>
		<NUMPAD_0 public="1" get="inline" set="null" line="114" static="1"><c path="Int"/></NUMPAD_0>
		<NUMPAD_1 public="1" get="inline" set="null" line="115" static="1"><c path="Int"/></NUMPAD_1>
		<NUMPAD_2 public="1" get="inline" set="null" line="116" static="1"><c path="Int"/></NUMPAD_2>
		<NUMPAD_3 public="1" get="inline" set="null" line="117" static="1"><c path="Int"/></NUMPAD_3>
		<NUMPAD_4 public="1" get="inline" set="null" line="118" static="1"><c path="Int"/></NUMPAD_4>
		<NUMPAD_5 public="1" get="inline" set="null" line="119" static="1"><c path="Int"/></NUMPAD_5>
		<NUMPAD_6 public="1" get="inline" set="null" line="120" static="1"><c path="Int"/></NUMPAD_6>
		<NUMPAD_7 public="1" get="inline" set="null" line="121" static="1"><c path="Int"/></NUMPAD_7>
		<NUMPAD_8 public="1" get="inline" set="null" line="122" static="1"><c path="Int"/></NUMPAD_8>
		<NUMPAD_9 public="1" get="inline" set="null" line="123" static="1"><c path="Int"/></NUMPAD_9>
		<NUMPAD_ADD public="1" get="inline" set="null" line="124" static="1"><c path="Int"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" get="inline" set="null" line="125" static="1"><c path="Int"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" get="inline" set="null" line="126" static="1"><c path="Int"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" get="inline" set="null" line="127" static="1"><c path="Int"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" get="inline" set="null" line="128" static="1"><c path="Int"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" get="inline" set="null" line="129" static="1"><c path="Int"/></NUMPAD_SUBTRACT>
		<nameOfKey public="1" set="method" line="136" static="1">
			<f a="char">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
	 * Returns the name of the key.
	 * @param	char		The key to name.
	 * @return	The name.
	 </haxe_doc>
		</nameOfKey>
	</class>
	<class path="com.revolugame.age.system.TileSheetData" params="" file="../../src/com/revolugame/age/system/TileSheetData.hx">
		<tilesheet public="1">
			<t path="nme.display.Tilesheet"/>
			<haxe_doc> </haxe_doc>
		</tilesheet>
		<data>
			<c path="Array"><c path="Float"/></c>
			<haxe_doc> Drawing data </haxe_doc>
		</data>
		<flags>
			<c path="Int"/>
			<haxe_doc> Drawing flags </haxe_doc>
		</flags>
		<_currentIndex>
			<c path="Int"/>
			<haxe_doc> Index in data </haxe_doc>
		</_currentIndex>
		<useAdditive>
			<e path="Bool"/>
			<haxe_doc> </haxe_doc>
		</useAdditive>
		<resetData public="1" set="method" line="37"><f a=""><e path="Void"/></f></resetData>
		<setPosition public="1" set="method" line="44"><f a="pX:pY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setPosition>
		<setFrameId public="1" set="method" line="50"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></setFrameId>
		<setRGB public="1" set="method" line="55"><f a="pRed:pGreen:pBlue">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setRGB>
		<setAlpha public="1" set="method" line="66"><f a="pAlpha">
	<c path="Float"/>
	<e path="Void"/>
</f></setAlpha>
		<setTransform public="1" set="method" line="75"><f a="pScaleX:pScaleY:pRotation:pMirrorX:pMirrorY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></setTransform>
		<render public="1" set="method" line="100"><f a=""><e path="Void"/></f></render>
		<destroy public="1" set="method" line="109"><f a=""><e path="Void"/></f></destroy>
		<new public="1" set="method" line="31"><f a="pTilesheet:?pUseAdditive">
	<t path="nme.display.Tilesheet"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Adrien Fischer
 </haxe_doc>
	</class>
	<typedef path="cpp.FileSystem" params="" file="/usr/lib/haxe/std/cpp/FileSystem.hx"><c path="sys.FileSystem"/></typedef>
	<typedef path="cpp.Sys" params="" file="/usr/lib/haxe/std/cpp/Sys.hx"><c path="Sys"/></typedef>
	<typedef path="cpp.io.File" params="" file="/usr/lib/haxe/std/cpp/io/File.hx"><c path="sys.io.File"/></typedef>
	<typedef path="cpp.io.Process" params="" file="/usr/lib/haxe/std/cpp/io/Process.hx"><c path="sys.io.Process"/></typedef>
	<class path="cpp.rtti.FieldNumericIntegerLookup" params="" file="/usr/lib/haxe/std/cpp/rtti/FieldNumericIntegerLookup.hx" interface="1"><haxe_doc>
	If you implement this interface, then the backend will generate code that
	allows fast numeric access to fields by integer id.  This should speed up the CFFI.
</haxe_doc></class>
	<class path="cpp.zip.Compress" params="" file="/usr/lib/haxe/std/cpp/zip/Compress.hx">
		<run public="1" set="method" line="47" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_deflate_init line="58" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></_deflate_init>
		<_deflate_bound line="59" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
</f></_deflate_bound>
		<_deflate_buffer line="60" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></_deflate_buffer>
		<_deflate_end line="61" static="1"><f a="">
	<d/>
	<unknown/>
</f></_deflate_end>
		<_set_flush_mode line="62" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<execute public="1" set="method" line="35"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></execute>
		<setFlushMode public="1" set="method" line="39"><f a="f">
	<e path="cpp.zip.Flush"/>
	<e path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="43"><f a=""><e path="Void"/></f></close>
		<new public="1" set="method" line="31"><f a="level">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="cpp.zip.Flush" params="" file="/usr/lib/haxe/std/cpp/zip/Flush.hx">
		<SYNC/>
		<NO/>
		<FULL/>
		<FINISH/>
		<BLOCK/>
	</enum>
	<class path="cpp.zip.Uncompress" params="" file="/usr/lib/haxe/std/cpp/zip/Uncompress.hx">
		<run public="1" set="method" line="46" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<_inflate_init line="64" static="1"><f a="">
	<t path="Null"><c path="Int"/></t>
	<unknown/>
</f></_inflate_init>
		<_inflate_buffer line="65" static="1"><f a="::::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></_inflate_buffer>
		<_inflate_end line="66" static="1"><f a="">
	<d/>
	<unknown/>
</f></_inflate_end>
		<_set_flush_mode line="67" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></_set_flush_mode>
		<s><d/></s>
		<this_run public="1" set="method" line="34"><f a="src:srcPos:dst:dstPos">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<a>
		<write><c path="Int"/></write>
		<read><c path="Int"/></read>
		<done><e path="Bool"/></done>
	</a>
</f></this_run>
		<setFlushMode public="1" set="method" line="38"><f a="f">
	<e path="cpp.zip.Flush"/>
	<e path="Void"/>
</f></setFlushMode>
		<close public="1" set="method" line="42"><f a=""><e path="Void"/></f></close>
		<new public="1" set="method" line="30"><f a="windowBits">
	<t path="Null"><c path="Int"/></t>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="flash.display.Stage" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Stage.hx"><t path="nme.display.Stage"/></typedef>
	<typedef path="flash.events.KeyboardEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/events/KeyboardEvent.hx"><t path="nme.events.KeyboardEvent"/></typedef>
	<typedef path="flash.geom.Rectangle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/geom/Rectangle.hx"><t path="nme.geom.Rectangle"/></typedef>
	<typedef path="flash.ui.Keyboard" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/ui/Keyboard.hx"><t path="nme.ui.Keyboard"/></typedef>
	<class path="haxe.Int32" params="" file="/usr/lib/haxe/std/cpp/_std/haxe/Int32.hx" extern="1">
		<make public="1" set="method" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" set="method" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<toInt public="1" set="method" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<add public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" set="method" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<complement public="1" set="method" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
		<isNeg public="1" set="method" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" set="method" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isZero>
		<ucompare public="1" set="method" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></ucompare>
		<toNativeInt public="1" set="method" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="54" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<typedef path="haxe.TimerList" params="" file="/usr/lib/haxe/lib/nme/3,3,3/haxe/Timer.hx" module="haxe.Timer"><c path="Array"><c path="haxe.Timer"/></c></typedef>
	<class path="haxe.Timer" params="" file="/usr/lib/haxe/lib/nme/3,3,3/haxe/Timer.hx">
		<sRunningTimers line="107" static="1"><t path="haxe.TimerList"/></sRunningTimers>
		<nmeNextWake public="1" set="method" line="147" static="1">
			<f a="limit">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeNextWake>
		<nmeCheckTimers public="1" set="method" line="189" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeCheckTimers>
		<GetMS set="method" line="202" static="1"><f a=""><c path="Float"/></f></GetMS>
		<delay public="1" set="method" line="210" static="1"><f a="f:time">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="224" static="1"><f a=""><c path="Float"/></f></stamp>
		<nme_time_stamp line="231" static="1"><f a=""><c path="Float"/></f></nme_time_stamp>
		<mTime><c path="Float"/></mTime>
		<mFireAt><c path="Float"/></mFireAt>
		<mRunning><e path="Bool"/></mRunning>
		<run public="1" set="dynamic" line="125"><f a=""><e path="Void"/></f></run>
		<stop public="1" set="method" line="132"><f a=""><e path="Void"/></f></stop>
		<nmeCheck set="method" line="174"><f a="inTime">
	<c path="Float"/>
	<e path="Void"/>
</f></nmeCheck>
		<new public="1" set="method" line="114"><f a="time">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/lib/haxe/std/haxe/io/BytesBuffer.hx">
		<b><t path="haxe.io.BytesData"/></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.io.Unsigned_char__" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData" extern="1"/>
	<typedef path="haxe.io.BytesData" params="" file="/usr/lib/haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="haxe.io.Unsigned_char__"/></c></typedef>
	<class path="haxe.io.Eof" params="" file="/usr/lib/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/lib/haxe/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<class path="neash.Lib" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/Lib.hx">
		<FULLSCREEN public="1" line="23" static="1"><c path="Int"/></FULLSCREEN>
		<BORDERLESS public="1" line="24" static="1"><c path="Int"/></BORDERLESS>
		<RESIZABLE public="1" line="25" static="1"><c path="Int"/></RESIZABLE>
		<HARDWARE public="1" line="26" static="1"><c path="Int"/></HARDWARE>
		<VSYNC public="1" line="27" static="1"><c path="Int"/></VSYNC>
		<HW_AA public="1" line="28" static="1"><c path="Int"/></HW_AA>
		<HW_AA_HIRES public="1" line="29" static="1"><c path="Int"/></HW_AA_HIRES>
		<current public="1" get="nmeGetCurrent" set="null" static="1"><c path="neash.display.MovieClip"/></current>
		<initHeight public="1" set="null" static="1"><c path="Int"/></initHeight>
		<initWidth public="1" set="null" static="1"><c path="Int"/></initWidth>
		<stage public="1" get="nmeGetStage" set="null" static="1"><c path="neash.display.Stage"/></stage>
		<nmeCurrent line="36" static="1"><c path="neash.display.MovieClip"/></nmeCurrent>
		<nmeMainFrame line="37" static="1"><d/></nmeMainFrame>
		<nmeStage line="38" static="1"><c path="neash.display.Stage"/></nmeStage>
		<sIsInit line="39" static="1"><e path="Bool"/></sIsInit>
		<company public="1" set="null" static="1"><c path="String"/></company>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<packageName public="1" set="null" static="1"><c path="String"/></packageName>
		<file public="1" set="null" static="1"><c path="String"/></file>
		<close public="1" set="method" line="46" static="1"><f a=""><e path="Void"/></f></close>
		<create public="1" set="method" line="53" static="1"><f a="inOnLoaded:inWidth:inHeight:?inFrameRate:?inColour:?inFlags:?inTitle:?inIcon">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<c path="neash.display.BitmapData"/>
	<e path="Void"/>
</f></create>
		<createManagedStage public="1" set="method" line="81" static="1"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<c path="neash.display.ManagedStage"/>
</f></createManagedStage>
		<exit public="1" set="method" line="91" static="1"><f a=""><e path="Void"/></f></exit>
		<forceClose public="1" set="method" line="107" static="1"><f a=""><e path="Void"/></f></forceClose>
		<getTimer public="1" set="method" line="115" static="1"><f a=""><c path="Int"/></f></getTimer>
		<getURL public="1" set="method" line="122" static="1"><f a="url:?target">
	<c path="neash.net.URLRequest"/>
	<c path="String"/>
	<e path="Void"/>
</f></getURL>
		<nmeSetCurrentStage public="1" set="method" line="131" static="1">
			<f a="inStage">
				<c path="neash.display.Stage"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
    * @private
    </haxe_doc>
		</nmeSetCurrentStage>
		<postUICallback public="1" set="method" line="137" static="1"><f a="inCallback">
	<f a=""><e path="Void"/></f>
	<e path="Void"/>
</f></postUICallback>
		<setIcon public="1" set="method" line="156" static="1"><f a="path">
	<c path="String"/>
	<e path="Void"/>
</f></setIcon>
		<setPackage public="1" set="method" line="163" static="1"><f a="inCompany:inFile:inPack:inVersion">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></setPackage>
		<nmeGetCurrent set="method" line="175" static="1"><f a=""><c path="neash.display.MovieClip"/></f></nmeGetCurrent>
		<nmeGetStage set="method" line="187" static="1"><f a=""><c path="neash.display.Stage"/></f></nmeGetStage>
		<nme_set_package line="203" static="1"><f a=":::">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></nme_set_package>
		<nme_get_frame_stage line="204" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_get_frame_stage>
		<nme_get_url line="205" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_get_url>
	</class>
	<class path="neash.display.Bitmap" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Bitmap.hx">
		<extends path="neash.display.DisplayObject"/>
		<bitmapData public="1" set="nmeSetBitmapData">
			<c path="neash.display.BitmapData"/>
			<haxe_doc>
	 * You can set the bitmapData property to change which image
	 * is displayed in the Bitmap. BitmapData objects can be shared
	 * between multiple Bitmap instances to improve performance
	 * and reduce memory usage.
	 </haxe_doc>
		</bitmapData>
		<pixelSnapping public="1">
			<e path="neash.display.PixelSnapping"/>
			<haxe_doc>
	 * Adjust the type of pixel snapping used when rendering the image
	 </haxe_doc>
		</pixelSnapping>
		<smoothing public="1" set="nmeSetSmoothing">
			<e path="Bool"/>
			<haxe_doc>
	 * Adjust whether the image should be rendered with smoothing
	 </haxe_doc>
		</smoothing>
		<mGraphics>
			<c path="neash.display.Graphics"/>
			<haxe_doc> @private </haxe_doc>
		</mGraphics>
		<nmeRebuid set="method" line="43">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeRebuid>
		<nmeSetBitmapData set="method" line="62">
			<f a="inBitmapData">
				<c path="neash.display.BitmapData"/>
				<c path="neash.display.BitmapData"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBitmapData>
		<nmeSetSmoothing set="method" line="71">
			<f a="inSmooth">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetSmoothing>
		<new public="1" set="method" line="32"><f a="?inBitmapData:?inPixelSnapping:?inSmoothing">
	<c path="neash.display.BitmapData"/>
	<e path="neash.display.PixelSnapping"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.BitmapData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/BitmapData.hx">
		<implements path="neash.display.IBitmapDrawable"/>
		<CLEAR public="1" line="22" static="1"><t path="neash.display.BitmapInt32"/></CLEAR>
		<BLACK public="1" line="23" static="1"><t path="neash.display.BitmapInt32"/></BLACK>
		<WHITE public="1" line="24" static="1"><t path="neash.display.BitmapInt32"/></WHITE>
		<RED public="1" line="25" static="1"><t path="neash.display.BitmapInt32"/></RED>
		<GREEN public="1" line="26" static="1"><t path="neash.display.BitmapInt32"/></GREEN>
		<BLUE public="1" line="27" static="1"><t path="neash.display.BitmapInt32"/></BLUE>
		<PNG public="1" get="inline" set="null" line="28" static="1"><c path="String"/></PNG>
		<JPG public="1" get="inline" set="null" line="29" static="1"><c path="String"/></JPG>
		<TRANSPARENT public="1" line="31" static="1"><c path="Int"/></TRANSPARENT>
		<HARDWARE public="1" line="32" static="1"><c path="Int"/></HARDWARE>
		<FORMAT_8888 public="1" line="33" static="1"><c path="Int"/></FORMAT_8888>
		<FORMAT_4444 public="1" line="34" static="1"><c path="Int"/></FORMAT_4444>
		<FORMAT_565 public="1" line="35" static="1"><c path="Int"/></FORMAT_565>
		<createColor public="1" get="inline" set="null" line="171" static="1"><f a="inRGB:?inAlpha">
	<c path="Int"/>
	<c path="Int"/>
	<t path="neash.display.BitmapInt32"/>
</f></createColor>
		<extractAlpha public="1" get="inline" set="null" line="219" static="1"><f a="v">
	<t path="neash.display.BitmapInt32"/>
	<c path="Int"/>
</f></extractAlpha>
		<extractColor public="1" get="inline" set="null" line="229" static="1"><f a="v">
	<t path="neash.display.BitmapInt32"/>
	<c path="Int"/>
</f></extractColor>
		<load public="1" set="method" line="325" static="1">
			<f a="inFilename:?format">
				<c path="String"/>
				<c path="Int"/>
				<c path="neash.display.BitmapData"/>
			</f>
			<haxe_doc>
	* Load from a file path
	*
	* @param inFilename Full or relative path to image file
	* @return New BitmapData instance representing file
	</haxe_doc>
		</load>
		<loadFromBytes public="1" set="method" line="341" static="1">
			<f a="inBytes:?inRawAlpha">
				<c path="neash.utils.ByteArray"/>
				<c path="neash.utils.ByteArray"/>
				<c path="neash.display.BitmapData"/>
			</f>
			<haxe_doc><![CDATA[
	* Create BitmapData from a compressed image stream.
	* PNG & JPG supported on all platforms.
	*
	* @param inBytes - A buffer of compressed image data
	* @param inAlpha - optional alpha values to go with image RGB values - there should
	*                   be width*height values.
	]]></haxe_doc>
		</loadFromBytes>
		<loadFromHaxeBytes public="1" set="method" line="357" static="1">
			<f a="inBytes:?inRawAlpha">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<c path="neash.display.BitmapData"/>
			</f>
			<haxe_doc><![CDATA[
	* Create BitmapData from a compressed image stream.
	* PNG & JPG supported on all platforms.
	*
	* @param inBytes - A buffer of compressed image data
	* @param inAlpha - optional alpha values to go with image RGB values - there should
	*                   be width*height values.
	]]></haxe_doc>
		</loadFromHaxeBytes>
		<nme_bitmap_data_create line="456" static="1"><f a="::::">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_create>
		<nme_bitmap_data_load line="457" static="1"><f a=":">
	<c path="String"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_load>
		<nme_bitmap_data_from_bytes line="458" static="1"><f a=":">
	<c path="neash.utils.ByteArray"/>
	<c path="neash.utils.ByteArray"/>
	<unknown/>
</f></nme_bitmap_data_from_bytes>
		<nme_bitmap_data_clear line="459" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_clear>
		<nme_bitmap_data_clone line="460" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_clone>
		<nme_bitmap_data_apply_filter line="461" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.Point"/>
	<c path="neash.filters.BitmapFilter"/>
	<unknown/>
</f></nme_bitmap_data_apply_filter>
		<nme_bitmap_data_color_transform line="462" static="1"><f a="::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.ColorTransform"/>
	<unknown/>
</f></nme_bitmap_data_color_transform>
		<nme_bitmap_data_copy line="463" static="1"><f a="::::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<d/>
	<c path="neash.geom.Point"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_bitmap_data_copy>
		<nme_bitmap_data_copy_channel line="464" static="1"><f a=":::::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<d/>
	<c path="neash.geom.Point"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_copy_channel>
		<nme_bitmap_data_fill line="465" static="1"><f a=":::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_fill>
		<nme_bitmap_data_get_pixels line="466" static="1"><f a=":">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="neash.utils.ByteArray"/>
</f></nme_bitmap_data_get_pixels>
		<nme_bitmap_data_get_pixel line="467" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></nme_bitmap_data_get_pixel>
		<nme_bitmap_data_get_pixel32 line="468" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="neash.display.BitmapInt32"/>
</f></nme_bitmap_data_get_pixel32>
		<nme_bitmap_data_get_pixel_rgba line="469" static="1"><unknown/></nme_bitmap_data_get_pixel_rgba>
		<nme_bitmap_data_get_array line="471" static="1"><f a="::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_get_array>
		<nme_bitmap_data_get_color_bounds_rect line="473" static="1"><f a="::::">
	<d/>
	<t path="neash.display.BitmapInt32"/>
	<t path="neash.display.BitmapInt32"/>
	<e path="Bool"/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_get_color_bounds_rect>
		<nme_bitmap_data_scroll line="474" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_scroll>
		<nme_bitmap_data_set_pixel line="475" static="1"><f a=":::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel>
		<nme_bitmap_data_set_pixel32 line="476" static="1"><f a=":::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="neash.display.BitmapInt32"/>
	<unknown/>
</f></nme_bitmap_data_set_pixel32>
		<nme_bitmap_data_set_pixel_rgba line="477" static="1"><unknown/></nme_bitmap_data_set_pixel_rgba>
		<nme_bitmap_data_set_bytes line="478" static="1"><f a=":::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="neash.utils.ByteArray"/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_bytes>
		<nme_bitmap_data_set_format line="479" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_format>
		<nme_bitmap_data_set_array line="481" static="1"><f a="::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<unknown/>
</f></nme_bitmap_data_set_array>
		<nme_bitmap_data_create_hardware_surface line="482" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_create_hardware_surface>
		<nme_bitmap_data_destroy_hardware_surface line="483" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_destroy_hardware_surface>
		<nme_bitmap_data_generate_filter_rect line="485" static="1"><f a="::">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.filters.BitmapFilter"/>
	<c path="neash.geom.Rectangle"/>
	<unknown/>
</f></nme_bitmap_data_generate_filter_rect>
		<nme_render_surface_to_surface line="486" static="1"><f a="::::::">
	<d/>
	<d/>
	<c path="neash.geom.Matrix"/>
	<c path="neash.geom.ColorTransform"/>
	<c path="String"/>
	<c path="neash.geom.Rectangle"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_render_surface_to_surface>
		<nme_bitmap_data_height line="487" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_bitmap_data_height>
		<nme_bitmap_data_width line="488" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_bitmap_data_width>
		<nme_bitmap_data_get_transparent line="489" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_bitmap_data_get_transparent>
		<nme_bitmap_data_set_flags line="490" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_bitmap_data_set_flags>
		<nme_bitmap_data_encode line="491" static="1"><f a="::">
	<d/>
	<c path="String"/>
	<c path="Float"/>
	<c path="neash.utils.ByteArray"/>
</f></nme_bitmap_data_encode>
		<nme_bitmap_data_dump_bits line="492" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_bitmap_data_dump_bits>
		<height public="1" get="nmeGetHeight" set="null">
			<c path="Int"/>
			<haxe_doc>
	 * Returns the height in pixels of the bitmap data
	 </haxe_doc>
		</height>
		<rect public="1" get="nmeGetRect" set="null">
			<c path="neash.geom.Rectangle"/>
			<haxe_doc>
	 * Returns a rectangle with the dimensions of the bitmap data
	 </haxe_doc>
		</rect>
		<transparent public="1" get="nmeGetTransparent" set="null">
			<e path="Bool"/>
			<haxe_doc>
	 * Returns whether the bitmap data includes transparency
	 </haxe_doc>
		</transparent>
		<width public="1" get="nmeGetWidth" set="null">
			<c path="Int"/>
			<haxe_doc>
	 * Returns the width in pixels of the bitmap data
	 </haxe_doc>
		</width>
		<nmeHandle public="1">
			<d/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeHandle>
		<applyFilter public="1" set="method" line="103">
			<f a="sourceBitmapData:sourceRect:destPoint:filter">
				<c path="neash.display.BitmapData"/>
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.Point"/>
				<c path="neash.filters.BitmapFilter"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Draws the result of a bitmap data object, plus a bitmap filter, to this bitmap data
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		A rectangle which defines the area to use from the source bitmap data object
	 * @param	destPoint		The location to place the result in this bitmap data object
	 * @param	filter		The bitmap filter to use
	 </haxe_doc>
		</applyFilter>
		<clear public="1" set="method" line="113">
			<f a="color">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Fills this bitmap data object using a solid color
	 * @param	color		The color to fill
	 </haxe_doc>
		</clear>
		<clone public="1" set="method" line="123">
			<f a=""><c path="neash.display.BitmapData"/></f>
			<haxe_doc>
	 * Duplicates the current instance as a new bitmap data object
	 * @return		A new duplicate bitmap data object
	 </haxe_doc>
		</clone>
		<colorTransform public="1" set="method" line="136">
			<f a="rect:colorTransform">
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Applies a color transform to a portion of this bitmap data object
	 * @param	rect		A rectangular area to transform
	 * @param	colorTransform		The color transform to use
	 </haxe_doc>
		</colorTransform>
		<copyChannel public="1" set="method" line="150">
			<f a="sourceBitmapData:sourceRect:destPoint:inSourceChannel:inDestChannel">
				<c path="neash.display.BitmapData"/>
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.Point"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Copies a channel (red, green, blue or alpha) into another channel or object
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		The source rectangle to pull from
	 * @param	destPoint		The destination point on this bitmap data object
	 * @param	inSourceChannel		The source channel to copy
	 * @param	inDestChannel		The destination channel to paste into
	 </haxe_doc>
		</copyChannel>
		<copyPixels public="1" set="method" line="165">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
				<c path="neash.display.BitmapData"/>
				<c path="neash.geom.Rectangle"/>
				<c path="neash.geom.Point"/>
				<c path="neash.display.BitmapData"/>
				<c path="neash.geom.Point"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Copies pixels from a bitmap data object into this instance
	 * @param	sourceBitmapData		The source bitmap data object
	 * @param	sourceRect		The source rectangle to pull from
	 * @param	destPoint		The destination point on this bitmap data object
	 * @param	alphaBitmapData		(Optional) A source bitmap data object to use for alpha information
	 * @param	alphaPoint		(Optional) A source point to use when copying from the alpha bitmap data object
	 * @param	mergeAlpha		(Optional) Whether copied pixels should have their alpha merged with pixels at the destination
	 </haxe_doc>
		</copyPixels>
		<createHardwareSurface public="1" set="method" line="182"><f a=""><e path="Void"/></f></createHardwareSurface>
		<destroyHardwareSurface public="1" set="method" line="188"><f a=""><e path="Void"/></f></destroyHardwareSurface>
		<dispose public="1" set="method" line="195"><f a=""><e path="Void"/></f></dispose>
		<draw public="1" set="method" line="201"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="neash.display.IBitmapDrawable"/>
	<c path="neash.geom.Matrix"/>
	<c path="neash.geom.ColorTransform"/>
	<c path="String"/>
	<c path="neash.geom.Rectangle"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></draw>
		<dumpBits public="1" set="method" line="207"><f a=""><e path="Void"/></f></dumpBits>
		<encode public="1" set="method" line="213"><f a="inFormat:?inQuality">
	<c path="String"/>
	<c path="Float"/>
	<c path="neash.utils.ByteArray"/>
</f></encode>
		<fillRect public="1" set="method" line="239"><f a="rect:inColour">
	<c path="neash.geom.Rectangle"/>
	<t path="neash.display.BitmapInt32"/>
	<e path="Void"/>
</f></fillRect>
		<fillRectEx public="1" set="method" line="247"><f a="rect:inColour:?inAlpha">
	<c path="neash.geom.Rectangle"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></fillRectEx>
		<generateFilterRect public="1" set="method" line="253"><f a="sourceRect:filter">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.filters.BitmapFilter"/>
	<c path="neash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method" line="261"><f a="mask:color:?findColor">
	<t path="neash.display.BitmapInt32"/>
	<t path="neash.display.BitmapInt32"/>
	<e path="Bool"/>
	<c path="neash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method" line="269"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></getPixel>
		<getPixel32 public="1" set="method" line="275"><f a="x:y">
	<c path="Int"/>
	<c path="Int"/>
	<t path="neash.display.BitmapInt32"/>
</f></getPixel32>
		<getPixels public="1" set="method" line="285"><f a="rect">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method" line="296"><f a="rect">
	<c path="neash.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
</f></getVector>
		<lock public="1" set="method" line="363"><f a=""><e path="Void"/></f></lock>
		<nmeDrawToSurface public="1" set="method" line="369">
			<f a="inSurface:matrix:colorTransform:blendMode:clipRect:smoothing">
				<d/>
				<c path="neash.geom.Matrix"/>
				<c path="neash.geom.ColorTransform"/>
				<c path="String"/>
				<c path="neash.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeDrawToSurface>
		<scroll public="1" set="method" line="376"><f a="inDX:inDY">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scroll>
		<setFlags public="1" set="method" line="382"><f a="inFlags">
	<c path="Int"/>
	<e path="Void"/>
</f></setFlags>
		<setPixel public="1" set="method" line="389"><f a="inX:inY:inColour">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method" line="395"><f a="inX:inY:inColour">
	<c path="Int"/>
	<c path="Int"/>
	<t path="neash.display.BitmapInt32"/>
	<e path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method" line="405"><f a="rect:pixels">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.utils.ByteArray"/>
	<e path="Void"/>
</f></setPixels>
		<setVector public="1" set="method" line="414"><f a="rect:inPixels">
	<c path="neash.geom.Rectangle"/>
	<c path="Array"><c path="Int"/></c>
	<e path="Void"/>
</f></setVector>
		<unlock public="1" set="method" line="431"><f a="?changeRect">
	<c path="neash.geom.Rectangle"/>
	<e path="Void"/>
</f></unlock>
		<setFormat public="1" set="method" line="436"><f a="format">
	<c path="Int"/>
	<e path="Void"/>
</f></setFormat>
		<nmeGetRect set="method" line="445">
			<f a=""><c path="neash.geom.Rectangle"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetRect>
		<nmeGetWidth set="method" line="446">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetWidth>
		<nmeGetHeight set="method" line="447">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetHeight>
		<nmeGetTransparent set="method" line="448">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTransparent>
		<new public="1" set="method" line="63"><f a="inWidth:inHeight:?inTransparent:?inFillRGBA">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<t path="neash.display.BitmapInt32"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author   Hugh Sanderson
* @author   Russell Weir
* @todo getPixel, getPixel32 should be optimized to use library methods
</haxe_doc>
	</class>
	<typedef path="neash.display.BitmapInt32" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/BitmapInt32.hx"><c path="Int"/></typedef>
	<enum path="neash.display.BlendMode" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/BlendMode.hx">
		<SUBTRACT/>
		<SCREEN/>
		<OVERLAY/>
		<NORMAL/>
		<MULTIPLY/>
		<LIGHTEN/>
		<LAYER/>
		<INVERT/>
		<HARDLIGHT/>
		<ERASE/>
		<DIFFERENCE/>
		<DARKEN/>
		<ALPHA/>
		<ADD/>
	</enum>
	<enum path="neash.display.CapsStyle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/CapsStyle.hx">
		<SQUARE/>
		<ROUND/>
		<NONE/>
	</enum>
	<enum path="neash.display.GradientType" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/GradientType.hx">
		<RADIAL/>
		<LINEAR/>
	</enum>
	<class path="neash.display.Graphics" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Graphics.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></TILE_ALPHA>
		<TILE_TRANS_2x2 public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></TILE_TRANS_2x2>
		<TILE_SMOOTH get="inline" set="null" line="18" static="1"><c path="Int"/></TILE_SMOOTH>
		<TILE_BLEND_NORMAL public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></TILE_BLEND_NORMAL>
		<TILE_BLEND_ADD public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></TILE_BLEND_ADD>
		<RGBA public="1" get="inline" set="null" line="190" static="1"><f a="inRGB:?inA">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></RGBA>
		<nme_gfx_clear line="205" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_clear>
		<nme_gfx_begin_fill line="206" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_begin_fill>
		<nme_gfx_begin_bitmap_fill line="207" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="neash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_gfx_begin_bitmap_fill>
		<nme_gfx_line_bitmap_fill line="208" static="1"><f a="::::">
	<d/>
	<d/>
	<c path="neash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_gfx_line_bitmap_fill>
		<nme_gfx_begin_gradient_fill line="209" static="1"><f a="::::::::">
	<d/>
	<c path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="neash.geom.Matrix"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_begin_gradient_fill>
		<nme_gfx_line_gradient_fill line="210" static="1"><f a="::::::::">
	<d/>
	<c path="Int"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="neash.geom.Matrix"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_gradient_fill>
		<nme_gfx_end_fill line="211" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_gfx_end_fill>
		<nme_gfx_line_style line="212" static="1"><f a="::::::::">
	<d/>
	<t path="Null"><c path="Float"/></t>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_style>
		<nme_gfx_move_to line="213" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_move_to>
		<nme_gfx_line_to line="214" static="1"><f a="::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_line_to>
		<nme_gfx_curve_to line="215" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_curve_to>
		<nme_gfx_arc_to line="216" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_arc_to>
		<nme_gfx_draw_ellipse line="217" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_ellipse>
		<nme_gfx_draw_data line="218" static="1"><f a=":">
	<d/>
	<c path="Array"><d/></c>
	<unknown/>
</f></nme_gfx_draw_data>
		<nme_gfx_draw_datum line="219" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_gfx_draw_datum>
		<nme_gfx_draw_rect line="220" static="1"><f a="::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_rect>
		<nme_gfx_draw_path line="221" static="1"><f a=":::">
	<d/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Bool"/>
	<unknown/>
</f></nme_gfx_draw_path>
		<nme_gfx_draw_tiles line="222" static="1"><f a=":::">
	<d/>
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<unknown/>
</f></nme_gfx_draw_tiles>
		<nme_gfx_draw_points line="223" static="1"><f a=":::::">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Float"/>
	<unknown/>
</f></nme_gfx_draw_points>
		<nme_gfx_draw_round_rect line="224" static="1"><f a="::::::">
	<d/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<t path="Null"><c path="Float"/></t>
	<unknown/>
</f></nme_gfx_draw_round_rect>
		<nme_gfx_draw_triangles line="225" static="1"><f a=":::::::">
	<d/>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
	<unknown/>
</f></nme_gfx_draw_triangles>
		<nmeHandle>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<arcTo public="1" set="method" line="33"><f a="inCX:inCY:inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></arcTo>
		<beginBitmapFill public="1" set="method" line="39"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="neash.display.BitmapData"/>
	<c path="neash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method" line="45"><f a="color:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method" line="51"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="neash.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="neash.geom.Matrix"/>
	<e path="neash.display.SpreadMethod"/>
	<e path="neash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<clear public="1" set="method" line="63"><f a=""><e path="Void"/></f></clear>
		<curveTo public="1" set="method" line="69"><f a="inCX:inCY:inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method" line="75"><f a="inX:inY:inRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method" line="81"><f a="inX:inY:inWidth:inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method" line="87"><f a="graphicsData">
	<c path="Array"><c path="neash.display.IGraphicsData"/></c>
	<e path="Void"/>
</f></drawGraphicsData>
		<drawGraphicsDatum public="1" set="method" line="98"><f a="graphicsDatum">
	<c path="neash.display.IGraphicsData"/>
	<e path="Void"/>
</f></drawGraphicsDatum>
		<drawPoints public="1" set="method" line="104"><f a="inXY:?inPointRGBA:?inDefaultRGBA:?inSize">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawPoints>
		<drawRect public="1" set="method" line="110"><f a="inX:inY:inWidth:inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method" line="116"><f a="inX:inY:inWidth:inHeight:inRadX:?inRadY">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawPath public="1" set="method" line="121"><f a="commands:data:?winding">
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="String"/>
	<e path="Void"/>
</f></drawPath>
		<drawTiles public="1" set="method" line="130">
			<f a="sheet:inXYID:?inSmooth:?inFlags">
				<c path="neash.display.Tilesheet"/>
				<c path="Array"><c path="Float"/></c>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</drawTiles>
		<drawTriangles public="1" set="method" line="141"><f a="vertices:?indices:?uvtData:?culling:?colours:?blendMode:?viewport">
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="neash.display.TriangleCulling"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></drawTriangles>
		<endFill public="1" set="method" line="148"><f a=""><e path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method" line="154"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="neash.display.BitmapData"/>
	<c path="neash.geom.Matrix"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></lineBitmapStyle>
		<lineGradientStyle public="1" set="method" line="160"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="neash.display.GradientType"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="neash.geom.Matrix"/>
	<e path="neash.display.SpreadMethod"/>
	<e path="neash.display.InterpolationMethod"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineGradientStyle>
		<lineStyle public="1" set="method" line="172"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="neash.display.LineScaleMode"/>
	<e path="neash.display.CapsStyle"/>
	<e path="neash.display.JointStyle"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method" line="178"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="184"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<new public="1" set="method" line="27"><f a="inHandle">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.GraphicsPathWinding" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/GraphicsPathWinding.hx">
		<EVEN_ODD public="1" get="inline" set="null" line="7" static="1"><c path="String"/></EVEN_ODD>
		<NON_ZERO public="1" get="inline" set="null" line="8" static="1"><c path="String"/></NON_ZERO>
	</class>
	<class path="neash.display.IGraphicsData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/IGraphicsData.hx">
		<nmeHandle public="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<new public="1" set="method" line="10"><f a="inHandle">
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="neash.display.InterpolationMethod" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/InterpolationMethod.hx">
		<RGB/>
		<LINEAR_RGB/>
	</enum>
	<enum path="neash.display.JointStyle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/JointStyle.hx">
		<ROUND/>
		<MITER/>
		<BEVEL/>
	</enum>
	<enum path="neash.display.LineScaleMode" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/LineScaleMode.hx">
		<VERTICAL/>
		<NORMAL/>
		<NONE/>
		<HORIZONTAL/>
	</enum>
	<class path="neash.events.Event" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/Event.hx">
		<ACTIVATE public="1" line="7" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" line="8" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" line="9" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" line="10" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" line="11" static="1"><c path="String"/></CHANGE>
		<CLOSE public="1" line="12" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" line="13" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" line="14" static="1"><c path="String"/></CONNECT>
		<DEACTIVATE public="1" line="15" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" line="16" static="1"><c path="String"/></ENTER_FRAME>
		<GOT_INPUT_FOCUS public="1" line="17" static="1"><c path="String"/></GOT_INPUT_FOCUS>
		<ID3 public="1" line="18" static="1"><c path="String"/></ID3>
		<INIT public="1" line="19" static="1"><c path="String"/></INIT>
		<LOST_INPUT_FOCUS public="1" line="20" static="1"><c path="String"/></LOST_INPUT_FOCUS>
		<MOUSE_LEAVE public="1" line="21" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" line="22" static="1"><c path="String"/></OPEN>
		<REMOVED public="1" line="23" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" line="24" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" line="25" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" line="26" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" line="27" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" line="28" static="1"><c path="String"/></SELECT>
		<SOUND_COMPLETE public="1" line="29" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" line="30" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" line="31" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" line="32" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<UNLOAD public="1" line="33" static="1"><c path="String"/></UNLOAD>
		<bubbles public="1" get="nmeGetBubbles" set="null"><e path="Bool"/></bubbles>
		<cancelable public="1" get="nmeGetCancelable" set="null"><e path="Bool"/></cancelable>
		<currentTarget public="1" get="nmeGetCurrentTarget" set="nmeSetCurrentTarget"><d/></currentTarget>
		<eventPhase public="1" get="nmeGetEventPhase" set="null"><c path="Int"/></eventPhase>
		<target public="1" get="nmeGetTarget" set="nmeSetTarget"><d/></target>
		<type public="1" get="nmeGetType" set="null"><c path="String"/></type>
		<_bubbles>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</_bubbles>
		<_cancelable>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</_cancelable>
		<_currentTarget>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</_currentTarget>
		<_eventPhase>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</_eventPhase>
		<_target>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</_target>
		<_type>
			<c path="String"/>
			<haxe_doc> @private </haxe_doc>
		</_type>
		<nmeIsCancelled>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeIsCancelled>
		<nmeIsCancelledNow>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeIsCancelledNow>
		<clone public="1" set="method" line="65"><f a=""><c path="neash.events.Event"/></f></clone>
		<nmeGetIsCancelled public="1" set="method" line="71">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetIsCancelled>
		<nmeGetIsCancelledNow public="1" set="method" line="77">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetIsCancelledNow>
		<nmeSetPhase public="1" set="method" line="83">
			<f a="inPhase">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetPhase>
		<stopImmediatePropagation public="1" set="method" line="90"><f a=""><e path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method" line="97"><f a=""><e path="Void"/></f></stopPropagation>
		<toString public="1" set="method" line="104"><f a=""><c path="String"/></f></toString>
		<nmeGetBubbles set="method" line="115"><f a=""><e path="Bool"/></f></nmeGetBubbles>
		<nmeGetCancelable set="method" line="116"><f a=""><e path="Bool"/></f></nmeGetCancelable>
		<nmeGetCurrentTarget set="method" line="117"><f a=""><d/></f></nmeGetCurrentTarget>
		<nmeSetCurrentTarget set="method" line="118"><f a="v">
	<d/>
	<d/>
</f></nmeSetCurrentTarget>
		<nmeGetEventPhase set="method" line="119"><f a=""><c path="Int"/></f></nmeGetEventPhase>
		<nmeGetTarget set="method" line="120"><f a=""><d/></f></nmeGetTarget>
		<nmeSetTarget set="method" line="121"><f a="v">
	<d/>
	<d/>
</f></nmeSetTarget>
		<nmeGetType set="method" line="122"><f a=""><c path="String"/></f></nmeGetType>
		<new public="1" set="method" line="52"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.MouseEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/MouseEvent.hx">
		<extends path="neash.events.Event"/>
		<DOUBLE_CLICK public="1" line="11" static="1"><c path="String"/></DOUBLE_CLICK>
		<CLICK public="1" line="12" static="1"><c path="String"/></CLICK>
		<MIDDLE_CLICK public="1" line="13" static="1"><c path="String"/></MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" line="14" static="1"><c path="String"/></MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" line="15" static="1"><c path="String"/></MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" line="16" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" line="17" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" line="18" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" line="19" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" line="20" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" line="21" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_CLICK public="1" line="22" static="1"><c path="String"/></RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" line="23" static="1"><c path="String"/></RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" line="24" static="1"><c path="String"/></RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" line="25" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" line="26" static="1"><c path="String"/></ROLL_OVER>
		<efLeftDown line="41" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown line="42" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown line="43" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown line="44" static="1"><c path="Int"/></efAltDown>
		<efCommandDown line="45" static="1"><c path="Int"/></efCommandDown>
		<nmeCreate public="1" set="method" line="70" static="1">
			<f a="inType:inEvent:inLocal:inTarget">
				<c path="String"/>
				<d/>
				<c path="neash.geom.Point"/>
				<c path="neash.display.InteractiveObject"/>
				<c path="neash.events.MouseEvent"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeCreate>
		<altKey public="1"><e path="Bool"/></altKey>
		<buttonDown public="1"><e path="Bool"/></buttonDown>
		<clickCount public="1"><c path="Int"/></clickCount>
		<commandKey public="1"><e path="Bool"/></commandKey>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<delta public="1"><c path="Int"/></delta>
		<localX public="1"><c path="Float"/></localX>
		<localY public="1"><c path="Float"/></localY>
		<relatedObject public="1"><c path="neash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<stageX public="1"><c path="Float"/></stageX>
		<stageY public="1"><c path="Float"/></stageY>
		<clone public="1" set="method" line="64" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<nmeCreateSimilar public="1" set="method" line="81">
			<f a="inType:?related:?targ">
				<c path="String"/>
				<c path="neash.display.InteractiveObject"/>
				<c path="neash.display.InteractiveObject"/>
				<c path="neash.events.MouseEvent"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeCreateSimilar>
		<toString public="1" set="method" line="93" override="1"><f a=""><c path="String"/></f></toString>
		<updateAfterEvent public="1" set="method" line="99"><f a=""><e path="Void"/></f></updateAfterEvent>
		<new public="1" set="method" line="48"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta:?commandKey:?clickCount">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="neash.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.TouchEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/TouchEvent.hx">
		<extends path="neash.events.MouseEvent"/>
		<TOUCH_BEGIN public="1" line="11" static="1"><c path="String"/></TOUCH_BEGIN>
		<TOUCH_END public="1" line="12" static="1"><c path="String"/></TOUCH_END>
		<TOUCH_MOVE public="1" line="13" static="1"><c path="String"/></TOUCH_MOVE>
		<TOUCH_OUT public="1" line="14" static="1"><c path="String"/></TOUCH_OUT>
		<TOUCH_OVER public="1" line="15" static="1"><c path="String"/></TOUCH_OVER>
		<TOUCH_ROLL_OUT public="1" line="16" static="1"><c path="String"/></TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER public="1" line="17" static="1"><c path="String"/></TOUCH_ROLL_OVER>
		<TOUCH_TAP public="1" line="18" static="1"><c path="String"/></TOUCH_TAP>
		<nmeCreate public="1" set="method" line="32" static="1"><f a="inType:inEvent:inLocal:inTarget">
	<c path="String"/>
	<d/>
	<c path="neash.geom.Point"/>
	<c path="neash.display.InteractiveObject"/>
	<c path="neash.events.TouchEvent"/>
</f></nmeCreate>
		<isPrimaryTouchPoint public="1"><e path="Bool"/></isPrimaryTouchPoint>
		<touchPointID public="1"><c path="Int"/></touchPointID>
		<nmeCreateSimilar public="1" set="method" line="43" override="1"><f a="inType:?related:?targ">
	<c path="String"/>
	<c path="neash.display.InteractiveObject"/>
	<c path="neash.display.InteractiveObject"/>
	<c path="neash.events.MouseEvent"/>
</f></nmeCreateSimilar>
		<new public="1" set="method" line="24"><f a="type:?bubbles:?cancelable:?in_localX:?in_localY:?in_relatedObject:?in_ctrlKey:?in_altKey:?in_shiftKey:?in_buttonDown:?in_delta:?in_commandKey:?in_clickCount">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="neash.display.InteractiveObject"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.Stage" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Stage.hx">
		<extends path="neash.display.DisplayObjectContainer"/>
		<nmeEarlyWakeup public="1" line="30" static="1">
			<c path="Float"/>
			<haxe_doc>
	 * Time, in seconds, we wake up before the frame is due.  We then do a
	 * "busy wait" to ensure the frame comes at the right time.  By increasing this number,
	 * the frame rate will be more constant, but the busy wait will take more CPU.
	 * @private
	 </haxe_doc>
		</nmeEarlyWakeup>
		<OrientationPortrait public="1" line="32" static="1"><c path="Int"/></OrientationPortrait>
		<OrientationPortraitUpsideDown public="1" line="33" static="1"><c path="Int"/></OrientationPortraitUpsideDown>
		<OrientationLandscapeRight public="1" line="34" static="1"><c path="Int"/></OrientationLandscapeRight>
		<OrientationLandscapeLeft public="1" line="35" static="1"><c path="Int"/></OrientationLandscapeLeft>
		<OrientationFaceUp public="1" line="36" static="1"><c path="Int"/></OrientationFaceUp>
		<OrientationFaceDown public="1" line="37" static="1"><c path="Int"/></OrientationFaceDown>
		<efLeftDown line="56" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown line="57" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown line="58" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown line="59" static="1"><c path="Int"/></efAltDown>
		<efCommandDown line="60" static="1"><c path="Int"/></efCommandDown>
		<efLocationRight line="61" static="1"><c path="Int"/></efLocationRight>
		<efNoNativeClick line="62" static="1"><c path="Int"/></efNoNativeClick>
		<nmeMouseChanges line="63" static="1"><c path="Array"><c path="String"/></c></nmeMouseChanges>
		<nmeTouchChanges line="64" static="1"><c path="Array"><c path="String"/></c></nmeTouchChanges>
		<sClickEvents line="65" static="1"><c path="Array"><c path="String"/></c></sClickEvents>
		<sDownEvents line="66" static="1"><c path="Array"><c path="String"/></c></sDownEvents>
		<sUpEvents line="67" static="1"><c path="Array"><c path="String"/></c></sUpEvents>
		<getOrientation public="1" set="dynamic" line="109" static="1"><f a=""><c path="Int"/></f></getOrientation>
		<getNormalOrientation public="1" set="dynamic" line="114" static="1"><f a=""><c path="Int"/></f></getNormalOrientation>
		<setFixedOrientation public="1" set="method" line="740" static="1"><f a="inOrientation">
	<c path="Int"/>
	<e path="Void"/>
</f></setFixedOrientation>
		<shouldRotateInterface public="1" set="dynamic" line="747" static="1"><f a="inOrientation">
	<c path="Int"/>
	<e path="Bool"/>
</f></shouldRotateInterface>
		<nme_set_stage_handler line="883" static="1"><f a=":::">
	<d/>
	<f a="inEvent">
		<d/>
		<d/>
	</f>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_set_stage_handler>
		<nme_render_stage line="884" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_render_stage>
		<nme_stage_get_focus_id line="885" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_focus_id>
		<nme_stage_set_focus line="886" static="1"><f a="::">
	<d/>
	<unknown/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_focus>
		<nme_stage_get_focus_rect line="887" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_get_focus_rect>
		<nme_stage_set_focus_rect line="888" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_stage_set_focus_rect>
		<nme_stage_is_opengl line="889" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_stage_is_opengl>
		<nme_stage_get_stage_width line="890" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_stage_width>
		<nme_stage_get_stage_height line="891" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_stage_height>
		<nme_stage_get_dpi_scale line="892" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_stage_get_dpi_scale>
		<nme_stage_get_scale_mode line="893" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_scale_mode>
		<nme_stage_set_scale_mode line="894" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_scale_mode>
		<nme_stage_get_align line="895" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_align>
		<nme_stage_set_align line="896" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_align>
		<nme_stage_get_quality line="897" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_quality>
		<nme_stage_set_quality line="898" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_quality>
		<nme_stage_get_display_state line="899" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_stage_get_display_state>
		<nme_stage_set_display_state line="900" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_display_state>
		<nme_stage_set_next_wake line="901" static="1"><f a=":">
	<d/>
	<c path="Float"/>
	<unknown/>
</f></nme_stage_set_next_wake>
		<nme_stage_request_render line="902" static="1"><unknown/></nme_stage_request_render>
		<nme_stage_show_cursor line="903" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_stage_show_cursor>
		<nme_stage_set_fixed_orientation line="904" static="1"><f a="">
	<c path="Int"/>
	<unknown/>
</f></nme_stage_set_fixed_orientation>
		<nme_stage_get_orientation line="905" static="1"><f a=""><c path="Int"/></f></nme_stage_get_orientation>
		<nme_stage_get_normal_orientation line="906" static="1"><f a=""><c path="Int"/></f></nme_stage_get_normal_orientation>
		<active public="1" set="null"><e path="Bool"/></active>
		<align public="1" get="nmeGetAlign" set="nmeSetAlign"><e path="neash.display.StageAlign"/></align>
		<displayState public="1" get="nmeGetDisplayState" set="nmeSetDisplayState"><e path="neash.display.StageDisplayState"/></displayState>
		<dpiScale public="1" get="nmeGetDPIScale" set="null"><c path="Float"/></dpiScale>
		<focus public="1" get="nmeGetFocus" set="nmeSetFocus"><c path="neash.display.InteractiveObject"/></focus>
		<frameRate public="1" set="nmeSetFrameRate"><c path="Float"/></frameRate>
		<isOpenGL public="1" get="nmeIsOpenGL" set="null"><e path="Bool"/></isOpenGL>
		<onKey public="1"><f a=":::">
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></onKey>
		<onQuit public="1"><f a=""><e path="Void"/></f></onQuit>
		<pauseWhenDeactivated public="1"><e path="Bool"/></pauseWhenDeactivated>
		<quality public="1" get="nmeGetQuality" set="nmeSetQuality"><e path="neash.display.StageQuality"/></quality>
		<renderRequest public="1"><f a=""><e path="Void"/></f></renderRequest>
		<scaleMode public="1" get="nmeGetScaleMode" set="nmeSetScaleMode"><e path="neash.display.StageScaleMode"/></scaleMode>
		<stageFocusRect public="1" get="nmeGetStageFocusRect" set="nmeSetStageFocusRect"><e path="Bool"/></stageFocusRect>
		<stageHeight public="1" get="nmeGetStageHeight" set="null"><c path="Int"/></stageHeight>
		<stageWidth public="1" get="nmeGetStageWidth" set="null"><c path="Int"/></stageWidth>
		<nmeJoyAxisData>
			<c path="IntHash"><t path="neash.display.JoyAxisData"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeJoyAxisData>
		<nmeDragBounds>
			<c path="neash.geom.Rectangle"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDragBounds>
		<nmeDragObject>
			<c path="neash.display.Sprite"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDragObject>
		<nmeDragOffsetX>
			<c path="Float"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDragOffsetX>
		<nmeDragOffsetY>
			<c path="Float"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDragOffsetY>
		<nmeFocusOverObjects>
			<c path="Array"><c path="neash.display.InteractiveObject"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeFocusOverObjects>
		<nmeFramePeriod>
			<c path="Float"/>
			<haxe_doc> @private </haxe_doc>
		</nmeFramePeriod>
		<nmeInvalid>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeInvalid>
		<nmeLastClickTime>
			<c path="Float"/>
			<haxe_doc> @private </haxe_doc>
		</nmeLastClickTime>
		<nmeLastDown>
			<c path="Array"><c path="neash.display.InteractiveObject"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeLastDown>
		<nmeLastRender>
			<c path="Float"/>
			<haxe_doc> @private </haxe_doc>
		</nmeLastRender>
		<nmeMouseOverObjects>
			<c path="Array"><c path="neash.display.InteractiveObject"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeMouseOverObjects>
		<nmeTouchInfo>
			<c path="IntHash"><c path="neash.display.TouchInfo"/></c>
			<haxe_doc> @private </haxe_doc>
		</nmeTouchInfo>
		<invalidate public="1" set="method" line="120"><f a=""><e path="Void"/></f></invalidate>
		<nmeCheckFocusInOuts set="method" line="126">
			<f a="inEvent:inStack">
				<d/>
				<c path="Array"><c path="neash.display.InteractiveObject"/></c>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeCheckFocusInOuts>
		<nmeCheckInOuts set="method" line="164">
			<f a="inEvent:inStack:?touchInfo">
				<c path="neash.events.MouseEvent"/>
				<c path="Array"><c path="neash.display.InteractiveObject"/></c>
				<c path="neash.display.TouchInfo"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeCheckInOuts>
		<nmeCheckRender set="method" line="216">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeCheckRender>
		<nmeDoProcessStageEvent set="method" line="234">
			<f a="inEvent">
				<d/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeDoProcessStageEvent>
		<dummyTrace set="method" line="350"><f a=""><e path="Void"/></f></dummyTrace>
		<nmeProcessStageEvent set="method" line="356">
			<f a="inEvent">
				<d/>
				<d/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeProcessStageEvent>
		<nmeDrag set="method" line="363">
			<f a="inMouse">
				<c path="neash.geom.Point"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeDrag>
		<nmeGetStage public="1" set="method" line="386" override="1">
			<f a=""><c path="neash.display.Stage"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetStage>
		<nmeNextFrameDue set="method" line="392">
			<f a="inOtherTimers">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeNextFrameDue>
		<nmeOnChange set="method" line="406">
			<f a="inEvent">
				<a><id set="null"><c path="Int"/></id></a>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnChange>
		<nmeOnFocus set="method" line="414">
			<f a="inEvent">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnFocus>
		<nmeOnJoystick set="method" line="438">
			<f a="inEvent:inType">
				<d/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnJoystick>
		<nmeOnKey set="method" line="498">
			<f a="inEvent:inType">
				<d/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnKey>
		<nmeOnMouse set="method" line="516">
			<f a="inEvent:inType:inFromMouse">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnMouse>
		<nmeOnResize set="method" line="599">
			<f a="inW:inH">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnResize>
		<nmeOnTouch set="method" line="606">
			<f a="inEvent:inType:touchInfo">
				<d/>
				<c path="String"/>
				<c path="neash.display.TouchInfo"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnTouch>
		<nmePollTimers public="1" set="method" line="645">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmePollTimers>
		<nmeRender public="1" set="method" line="655">
			<f a="inSendEnterFrame">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeRender>
		<nmeSetActive public="1" set="method" line="674">
			<f a="inActive">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetActive>
		<nmeStartDrag public="1" set="method" line="691">
			<f a="sprite:lockCenter:bounds">
				<c path="neash.display.Sprite"/>
				<e path="Bool"/>
				<c path="neash.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeStartDrag>
		<nmeStopDrag public="1" set="method" line="717">
			<f a="sprite">
				<c path="neash.display.Sprite"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeStopDrag>
		<nmeUpdateNextWake public="1" set="method" line="724">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeUpdateNextWake>
		<showCursor public="1" set="method" line="753"><f a="inShow">
	<e path="Bool"/>
	<e path="Void"/>
</f></showCursor>
		<nmeGetAlign set="method" line="764">
			<f a=""><e path="neash.display.StageAlign"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetAlign>
		<nmeSetAlign set="method" line="771">
			<f a="inMode">
				<e path="neash.display.StageAlign"/>
				<e path="neash.display.StageAlign"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetAlign>
		<nmeGetDisplayState set="method" line="778">
			<f a=""><e path="neash.display.StageDisplayState"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetDisplayState>
		<nmeSetDisplayState set="method" line="785">
			<f a="inState">
				<e path="neash.display.StageDisplayState"/>
				<e path="neash.display.StageDisplayState"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetDisplayState>
		<nmeGetDPIScale set="method" line="792">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetDPIScale>
		<nmeGetFocus set="method" line="798">
			<f a=""><c path="neash.display.InteractiveObject"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetFocus>
		<nmeSetFocus set="method" line="806">
			<f a="inObject">
				<c path="neash.display.InteractiveObject"/>
				<c path="neash.display.InteractiveObject"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetFocus>
		<nmeSetFrameRate set="method" line="816">
			<f a="inRate">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetFrameRate>
		<nmeIsOpenGL set="method" line="824">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeIsOpenGL>
		<nmeGetQuality set="method" line="830">
			<f a=""><e path="neash.display.StageQuality"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetQuality>
		<nmeSetQuality set="method" line="837">
			<f a="inQuality">
				<e path="neash.display.StageQuality"/>
				<e path="neash.display.StageQuality"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetQuality>
		<nmeGetScaleMode set="method" line="844">
			<f a=""><e path="neash.display.StageScaleMode"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScaleMode>
		<nmeSetScaleMode set="method" line="851">
			<f a="inMode">
				<e path="neash.display.StageScaleMode"/>
				<e path="neash.display.StageScaleMode"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScaleMode>
		<nmeGetStageFocusRect set="method" line="858">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetStageFocusRect>
		<nmeSetStageFocusRect set="method" line="859">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetStageFocusRect>
		<nmeGetStageHeight set="method" line="866">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetStageHeight>
		<nmeGetStageWidth set="method" line="872">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetStageWidth>
		<new public="1" set="method" line="84"><f a="inHandle:inWidth:inHeight">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.ManagedStage" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/ManagedStage.hx">
		<extends path="neash.display.Stage"/>
		<etUnknown public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></etUnknown>
		<etKeyDown public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></etKeyDown>
		<etChar public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></etChar>
		<etKeyUp public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></etKeyUp>
		<etMouseMove public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></etMouseMove>
		<etMouseDown public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></etMouseDown>
		<etMouseClick public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></etMouseClick>
		<etMouseUp public="1" get="inline" set="null" line="17" static="1"><c path="Int"/></etMouseUp>
		<etResize public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></etResize>
		<etPoll public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></etPoll>
		<etQuit public="1" get="inline" set="null" line="20" static="1"><c path="Int"/></etQuit>
		<etFocus public="1" get="inline" set="null" line="21" static="1"><c path="Int"/></etFocus>
		<etShouldRotate public="1" get="inline" set="null" line="22" static="1"><c path="Int"/></etShouldRotate>
		<etDestroyHandler public="1" get="inline" set="null" line="23" static="1"><c path="Int"/></etDestroyHandler>
		<etRedraw public="1" get="inline" set="null" line="24" static="1"><c path="Int"/></etRedraw>
		<etTouchBegin public="1" get="inline" set="null" line="25" static="1"><c path="Int"/></etTouchBegin>
		<etTouchMove public="1" get="inline" set="null" line="26" static="1"><c path="Int"/></etTouchMove>
		<etTouchEnd public="1" get="inline" set="null" line="27" static="1"><c path="Int"/></etTouchEnd>
		<etTouchTap public="1" get="inline" set="null" line="28" static="1"><c path="Int"/></etTouchTap>
		<etChange public="1" get="inline" set="null" line="29" static="1"><c path="Int"/></etChange>
		<efLeftDown public="1" get="inline" set="null" line="30" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown public="1" get="inline" set="null" line="31" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown public="1" get="inline" set="null" line="32" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown public="1" get="inline" set="null" line="33" static="1"><c path="Int"/></efAltDown>
		<efCommandDown public="1" get="inline" set="null" line="34" static="1"><c path="Int"/></efCommandDown>
		<efMiddleDown public="1" get="inline" set="null" line="35" static="1"><c path="Int"/></efMiddleDown>
		<efRightDown public="1" get="inline" set="null" line="36" static="1"><c path="Int"/></efRightDown>
		<efLocationRight public="1" get="inline" set="null" line="37" static="1"><c path="Int"/></efLocationRight>
		<efPrimaryTouch public="1" get="inline" set="null" line="38" static="1"><c path="Int"/></efPrimaryTouch>
		<nme_managed_stage_create line="110" static="1"><f a=":">
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_managed_stage_create>
		<nme_managed_stage_pump_event line="111" static="1"><f a=":">
	<d/>
	<d/>
	<unknown/>
</f></nme_managed_stage_pump_event>
		<beginRender public="1" set="dynamic" line="47"><f a=""><e path="Void"/></f></beginRender>
		<endRender public="1" set="dynamic" line="53"><f a=""><e path="Void"/></f></endRender>
		<nmeDoProcessStageEvent set="method" line="59" override="1"><f a="inEvent">
	<d/>
	<c path="Float"/>
</f></nmeDoProcessStageEvent>
		<nmeRender public="1" set="method" line="73" override="1">
			<f a="inSendEnterFrame">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeRender>
		<pumpEvent public="1" set="method" line="81"><f a="inEvent">
	<d/>
	<e path="Void"/>
</f></pumpEvent>
		<resize public="1" set="method" line="87"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resize>
		<sendQuit public="1" set="method" line="93"><f a=""><e path="Void"/></f></sendQuit>
		<setNextWake public="1" set="dynamic" line="99"><f a="inDelay">
	<c path="Float"/>
	<e path="Void"/>
</f></setNextWake>
		<new public="1" set="method" line="41"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.display.MovieClip" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/MovieClip.hx">
		<extends path="neash.display.Sprite"/>
		<currentFrame public="1" get="nmeGetCurrentFrame" set="null"><c path="Int"/></currentFrame>
		<enabled public="1"><e path="Bool"/></enabled>
		<framesLoaded public="1" get="nmeGetTotalFrames" set="null"><c path="Int"/></framesLoaded>
		<totalFrames public="1" get="nmeGetTotalFrames" set="null"><c path="Int"/></totalFrames>
		<mCurrentFrame>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</mCurrentFrame>
		<mTotalFrames>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</mTotalFrames>
		<gotoAndPlay public="1" set="method" line="24"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method" line="30"><f a="frame:?scene">
	<d/>
	<c path="String"/>
	<e path="Void"/>
</f></gotoAndStop>
		<nmeGetType set="method" line="36" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetType>
		<play public="1" set="method" line="42"><f a=""><e path="Void"/></f></play>
		<stop public="1" set="method" line="48"><f a=""><e path="Void"/></f></stop>
		<nmeGetCurrentFrame set="method" line="59">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetCurrentFrame>
		<nmeGetTotalFrames set="method" line="60">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTotalFrames>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="neash.display.PixelSnapping" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/PixelSnapping.hx">
		<NEVER/>
		<AUTO/>
		<ALWAYS/>
	</enum>
	<enum path="neash.display.SpreadMethod" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/SpreadMethod.hx">
		<REPEAT/>
		<REFLECT/>
		<PAD/>
	</enum>
	<typedef path="neash.display.JoyAxisData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Stage.hx" module="neash.display.Stage"><a>
	<z><c path="Float"/></z>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<class path="neash.display.TouchInfo" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Stage.hx" module="neash.display.Stage">
		<touchOverObjects public="1"><c path="Array"><c path="neash.display.InteractiveObject"/></c></touchOverObjects>
		<new public="1" set="method" line="925"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="neash.display.StageAlign" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/StageAlign.hx">
		<TOP_RIGHT/>
		<TOP_LEFT/>
		<TOP/>
		<RIGHT/>
		<LEFT/>
		<BOTTOM_RIGHT/>
		<BOTTOM_LEFT/>
		<BOTTOM/>
	</enum>
	<enum path="neash.display.StageDisplayState" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/StageDisplayState.hx">
		<NORMAL/>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
	</enum>
	<enum path="neash.display.StageQuality" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/StageQuality.hx">
		<MEDIUM/>
		<LOW/>
		<HIGH/>
		<BEST/>
	</enum>
	<enum path="neash.display.StageScaleMode" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
	</enum>
	<class path="neash.display.Tilesheet" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/Tilesheet.hx">
		<TILE_SCALE public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" get="inline" set="null" line="15" static="1"><c path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" get="inline" set="null" line="16" static="1"><c path="Int"/></TILE_ALPHA>
		<TILE_BLEND_NORMAL public="1" get="inline" set="null" line="18" static="1"><c path="Int"/></TILE_BLEND_NORMAL>
		<TILE_BLEND_ADD public="1" get="inline" set="null" line="19" static="1"><c path="Int"/></TILE_BLEND_ADD>
		<nme_tilesheet_create line="68" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_tilesheet_create>
		<nme_tilesheet_add_rect line="69" static="1"><f a="::">
	<d/>
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.Point"/>
	<unknown/>
</f></nme_tilesheet_add_rect>
		<nmeBitmap public="1">
			<c path="neash.display.BitmapData"/>
			<haxe_doc> @private </haxe_doc>
		</nmeBitmap>
		<nmeHandle public="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<addTileRect public="1" set="method" line="32"><f a="rectangle:?centerPoint">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.Point"/>
	<e path="Void"/>
</f></addTileRect>
		<drawTiles public="1" set="method" line="57">
			<f a="graphics:tileData:?smooth:?flags">
				<c path="neash.display.Graphics"/>
				<c path="Array"><c path="Float"/></c>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
	 * Fast method to draw a batch of tiles using a Tilesheet
	 * 
	 * The input array accepts the x, y and tile ID for each tile you wish to draw.
	 * For example, an array of [ 0, 0, 0, 10, 10, 1 ] would draw tile 0 to (0, 0) and
	 * tile 1 to (10, 10)
	 * 
	 * You can also set flags for TILE_SCALE, TILE_ROTATION, TILE_RGB and
	 * TILE_ALPHA.
	 * 
	 * Depending on which flags are active, this is the full order of the array:
	 * 
	 * [ x, y, tile ID, scale, rotation, red, green, blue, alpha, x, y ... ]
	 * 
	 * @param	graphics		The nme.display.Graphics object to use for drawing
	 * @param	tileData		An array of all position, ID and optional values for use in drawing
	 * @param	smooth		(Optional) Whether drawn tiles should be smoothed (Default: false)
	 * @param	flags		(Optional) Flags to enable scale, rotation, RGB and/or alpha when drawing (Default: 0)
	 </haxe_doc>
		</drawTiles>
		<new public="1" set="method" line="25"><f a="inImage">
	<c path="neash.display.BitmapData"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="neash.display.TriangleCulling" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/display/TriangleCulling.hx">
		<POSITIVE/>
		<NONE/>
		<NEGATIVE/>
	</enum>
	<class path="neash.errors.Error" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/errors/Error.hx">
		<errorID>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</errorID>
		<message>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</message>
		<name>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</name>
		<getStackTrace set="method" line="18"><f a=""><c path="String"/></f></getStackTrace>
		<toString public="1" set="method" line="24"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="11"><f a="?inMessage:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.errors.ArgumentError" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/errors/ArgumentError.hx">
		<extends path="neash.errors.Error"/>
		<new public="1" set="method" line="4"><f a="?inMessage:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.errors.EOFError" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/errors/EOFError.hx">
		<extends path="neash.errors.Error"/>
		<new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neash.errors.RangeError" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/errors/RangeError.hx">
		<extends path="neash.errors.Error"/>
		<new public="1" set="method" line="7"><f a="?inMessage">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.TextEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/TextEvent.hx">
		<extends path="neash.events.Event"/>
		<LINK public="1" line="7" static="1"><c path="String"/></LINK>
		<TEXT_INPUT public="1" line="8" static="1"><c path="String"/></TEXT_INPUT>
		<text public="1" set="null"><c path="String"/></text>
		<clone public="1" set="method" line="20" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="26" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="13"><f a="type:?bubbles:?cancelable:?text">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.ErrorEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/ErrorEvent.hx">
		<extends path="neash.events.TextEvent"/>
		<errorID public="1" set="null"><c path="Int"/></errorID>
		<clone public="1" set="method" line="17" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="23" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="10"><f a="type:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.Listener" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/EventDispatcher.hx" module="neash.events.EventDispatcher">
		<sIDs line="168" static="1"><c path="Int"/></sIDs>
		<mID public="1"><c path="Int"/></mID>
		<mListner public="1"><t path="neash.events.Function"/></mListner>
		<mPriority public="1"><c path="Int"/></mPriority>
		<mUseCapture public="1"><e path="Bool"/></mUseCapture>
		<dispatchEvent public="1" set="method" line="180"><f a="event">
	<c path="neash.events.Event"/>
	<e path="Void"/>
</f></dispatchEvent>
		<Is public="1" set="method" line="186"><f a="inListener:inCapture">
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></Is>
		<new public="1" set="method" line="171"><f a="inListener:inUseCapture:inPriority">
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="neash.events.ListenerList" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/EventDispatcher.hx" module="neash.events.EventDispatcher"><c path="Array"><c path="neash.utils.WeakRef"><c path="neash.events.Listener"/></c></c></typedef>
	<typedef path="neash.events.EventMap" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/EventDispatcher.hx" module="neash.events.EventDispatcher"><c path="Hash"><t path="neash.events.ListenerList"/></c></typedef>
	<class path="neash.events.EventPhase" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/EventPhase.hx">
		<CAPTURING_PHASE public="1" line="6" static="1"><c path="Int"/></CAPTURING_PHASE>
		<AT_TARGET public="1" line="7" static="1"><c path="Int"/></AT_TARGET>
		<BUBBLING_PHASE public="1" line="8" static="1"><c path="Int"/></BUBBLING_PHASE>
	</class>
	<class path="neash.events.FocusEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/FocusEvent.hx">
		<extends path="neash.events.Event"/>
		<FOCUS_IN public="1" line="10" static="1"><c path="String"/></FOCUS_IN>
		<FOCUS_OUT public="1" line="11" static="1"><c path="String"/></FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" line="12" static="1"><c path="String"/></KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" line="13" static="1"><c path="String"/></MOUSE_FOCUS_CHANGE>
		<keyCode public="1" set="null"><c path="Int"/></keyCode>
		<relatedObject public="1" set="null"><c path="neash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1" set="null"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="29" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="35" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="20"><f a="inType:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode:?direction">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="neash.display.InteractiveObject"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.HTTPStatusEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/HTTPStatusEvent.hx">
		<extends path="neash.events.Event"/>
		<HTTP_STATUS public="1" line="7" static="1"><c path="String"/></HTTP_STATUS>
		<status public="1"><c path="Int"/></status>
		<clone public="1" set="method" line="18" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="24" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="11"><f a="inType:?bubbles:?cancelable:?status">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="neash.events.Function" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/IEventDispatcher.hx" module="neash.events.IEventDispatcher"><f a="">
	<d/>
	<e path="Void"/>
</f></typedef>
	<class path="neash.events.IOErrorEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/IOErrorEvent.hx">
		<extends path="neash.events.ErrorEvent"/>
		<IO_ERROR public="1" line="7" static="1"><c path="String"/></IO_ERROR>
		<clone public="1" set="method" line="16" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="22" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="10"><f a="inType:?bubbles:?cancelable:?text:?id">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.JoystickEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/JoystickEvent.hx">
		<extends path="neash.events.Event"/>
		<AXIS_MOVE public="1" line="7" static="1"><c path="String"/></AXIS_MOVE>
		<BALL_MOVE public="1" line="8" static="1"><c path="String"/></BALL_MOVE>
		<BUTTON_DOWN public="1" line="9" static="1"><c path="String"/></BUTTON_DOWN>
		<BUTTON_UP public="1" line="10" static="1"><c path="String"/></BUTTON_UP>
		<HAT_MOVE public="1" line="11" static="1"><c path="String"/></HAT_MOVE>
		<device public="1"><c path="Int"/></device>
		<id public="1"><c path="Int"/></id>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<z public="1"><c path="Float"/></z>
		<clone public="1" set="method" line="32" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="38" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="20"><f a="type:?bubbles:?cancelable:?device:?id:?x:?y:?z">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.KeyboardEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/KeyboardEvent.hx">
		<extends path="neash.events.Event"/>
		<KEY_DOWN public="1" line="7" static="1"><c path="String"/></KEY_DOWN>
		<KEY_UP public="1" line="8" static="1"><c path="String"/></KEY_UP>
		<altKey public="1"><e path="Bool"/></altKey>
		<charCode public="1"><c path="Int"/></charCode>
		<ctrlKey public="1"><e path="Bool"/></ctrlKey>
		<controlKey public="1"><e path="Bool"/></controlKey>
		<commandKey public="1"><e path="Bool"/></commandKey>
		<keyCode public="1"><c path="Int"/></keyCode>
		<keyLocation public="1"><c path="Int"/></keyLocation>
		<shiftKey public="1"><e path="Bool"/></shiftKey>
		<clone public="1" set="method" line="36" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="42" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="20"><f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue:?keyLocationValue:?ctrlKeyValue:?altKeyValue:?shiftKeyValue:?controlKeyValue:?commandKeyValue">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.ProgressEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/ProgressEvent.hx">
		<extends path="neash.events.Event"/>
		<PROGRESS public="1" get="inline" set="null" line="7" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" get="inline" set="null" line="8" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<clone public="1" set="method" line="22" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="28" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="14"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.events.SampleDataEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/events/SampleDataEvent.hx">
		<extends path="neash.events.Event"/>
		<SAMPLE_DATA public="1" line="9" static="1"><c path="String"/></SAMPLE_DATA>
		<data public="1"><c path="neash.utils.ByteArray"/></data>
		<position public="1"><c path="Float"/></position>
		<clone public="1" set="method" line="25" override="1"><f a=""><c path="neash.events.Event"/></f></clone>
		<toString public="1" set="method" line="31" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="16"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.filters.BitmapFilter" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/filters/BitmapFilter.hx">
		<type>
			<c path="String"/>
			<haxe_doc> @private </haxe_doc>
		</type>
		<clone public="1" set="method" line="16"><f a=""><c path="neash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method" line="10"><f a="inType">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.geom.ColorTransform" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/geom/ColorTransform.hx">
		<alphaMultiplier public="1"><c path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><c path="Float"/></alphaOffset>
		<blueMultiplier public="1"><c path="Float"/></blueMultiplier>
		<blueOffset public="1"><c path="Float"/></blueOffset>
		<greenMultiplier public="1"><c path="Float"/></greenMultiplier>
		<greenOffset public="1"><c path="Float"/></greenOffset>
		<redMultiplier public="1"><c path="Float"/></redMultiplier>
		<redOffset public="1"><c path="Float"/></redOffset>
		<concat public="1" set="method" line="35"><f a="second">
	<c path="neash.geom.ColorTransform"/>
	<e path="Void"/>
</f></concat>
		<new public="1" set="method" line="22"><f a="?inRedMultiplier:?inGreenMultiplier:?inBlueMultiplier:?inAlphaMultiplier:?inRedOffset:?inGreenOffset:?inBlueOffset:?inAlphaOffset">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author	Hugh Sanderson
* @author	Russell Weir
* @todo Check concat() mirrors flash behaviour
</haxe_doc>
	</class>
	<class path="neash.geom.Matrix" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/geom/Matrix.hx">
		<implements path="cpp.rtti.FieldNumericIntegerLookup"/>
		<a public="1"><c path="Float"/></a>
		<b public="1"><c path="Float"/></b>
		<c public="1"><c path="Float"/></c>
		<d public="1"><c path="Float"/></d>
		<tx public="1"><c path="Float"/></tx>
		<ty public="1"><c path="Float"/></ty>
		<clone public="1" set="method" line="36"><f a=""><c path="neash.geom.Matrix"/></f></clone>
		<concat public="1" set="method" line="56"><f a="m">
	<c path="neash.geom.Matrix"/>
	<e path="Void"/>
</f></concat>
		<createBox public="1" set="method" line="73"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method" line="83"><f a="in_width:in_height:?rotation:?in_tx:?in_ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></createGradientBox>
		<deltaTransformPoint public="1" set="method" line="108"><f a="point">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method" line="114"><f a=""><e path="Void"/></f></identity>
		<invert public="1" set="method" line="125"><f a=""><c path="neash.geom.Matrix"/></f></invert>
		<mult public="1" set="method" line="153"><f a="m">
	<c path="neash.geom.Matrix"/>
	<c path="neash.geom.Matrix"/>
</f></mult>
		<rotate public="1" set="method" line="181"><f a="inTheta">
	<c path="Float"/>
	<e path="Void"/>
</f></rotate>
		<scale public="1" set="method" line="207"><f a="inSX:inSY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></scale>
		<setRotation public="1" set="method" line="220"><f a="inTheta:?inScale">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setRotation>
		<transformPoint public="1" set="method" line="230"><f a="inPos">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method" line="236"><f a="inDX:inDY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></translate>
		<new public="1" set="method" line="25"><f a="?in_a:?in_b:?in_c:?in_d:?in_tx:?in_ty">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author	Hugh Sanderson
* @author	Russell Weir
</haxe_doc>
	</class>
	<class path="neash.geom.Point" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/geom/Point.hx">
		<distance public="1" set="method" line="57" static="1"><f a="pt1:pt2">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
	<c path="Float"/>
</f></distance>
		<interpolate public="1" set="method" line="71" static="1"><f a="pt1:pt2:f">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
	<c path="Float"/>
	<c path="neash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" line="97" static="1"><f a="len:angle">
	<c path="Float"/>
	<c path="Float"/>
	<c path="neash.geom.Point"/>
</f></polar>
		<length public="1" get="nmeGetLength" set="null"><c path="Float"/></length>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<add public="1" set="method" line="45"><f a="v">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
</f></add>
		<clone public="1" set="method" line="51"><f a=""><c path="neash.geom.Point"/></f></clone>
		<equals public="1" set="method" line="65"><f a="toCompare">
	<c path="neash.geom.Point"/>
	<e path="Bool"/>
</f></equals>
		<normalize public="1" set="method" line="77"><f a="thickness">
	<c path="Float"/>
	<e path="Void"/>
</f></normalize>
		<offset public="1" set="method" line="90"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<subtract public="1" set="method" line="103"><f a="v">
	<c path="neash.geom.Point"/>
	<c path="neash.geom.Point"/>
</f></subtract>
		<nmeGetLength set="method" line="114">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetLength>
		<new public="1" set="method" line="38"><f a="?inX:?inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.geom.Rectangle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/geom/Rectangle.hx">
		<bottom public="1" get="nmeGetBottom" set="nmeSetBottom"><c path="Float"/></bottom>
		<bottomRight public="1" get="nmeGetBottomRight" set="nmeSetBottomRight"><c path="neash.geom.Point"/></bottomRight>
		<height public="1"><c path="Float"/></height>
		<left public="1" get="nmeGetLeft" set="nmeSetLeft"><c path="Float"/></left>
		<right public="1" get="nmeGetRight" set="nmeSetRight"><c path="Float"/></right>
		<size public="1" get="nmeGetTopLeft" set="nmeSetTopLeft"><c path="neash.geom.Point"/></size>
		<top public="1" get="nmeGetTop" set="nmeSetTop"><c path="Float"/></top>
		<topLeft public="1" get="nmeGetTopLeft" set="nmeSetTopLeft"><c path="neash.geom.Point"/></topLeft>
		<width public="1"><c path="Float"/></width>
		<x public="1"><c path="Float"/></x>
		<y public="1"><c path="Float"/></y>
		<clone public="1" set="method" line="52"><f a=""><c path="neash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method" line="58"><f a="inX:inY">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method" line="64"><f a="point">
	<c path="neash.geom.Point"/>
	<e path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method" line="70"><f a="rect">
	<c path="neash.geom.Rectangle"/>
	<e path="Bool"/>
</f></containsRect>
		<equals public="1" set="method" line="76"><f a="toCompare">
	<c path="neash.geom.Rectangle"/>
	<e path="Bool"/>
</f></equals>
		<extendBounds public="1" set="method" line="82"><f a="r">
	<c path="neash.geom.Rectangle"/>
	<e path="Void"/>
</f></extendBounds>
		<inflate public="1" set="method" line="103"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method" line="110"><f a="point">
	<c path="neash.geom.Point"/>
	<e path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method" line="116"><f a="toIntersect">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method" line="132"><f a="toIntersect">
	<c path="neash.geom.Rectangle"/>
	<e path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method" line="145"><f a=""><e path="Bool"/></f></isEmpty>
		<offset public="1" set="method" line="151"><f a="dx:dy">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method" line="158"><f a="point">
	<c path="neash.geom.Point"/>
	<e path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method" line="165"><f a=""><e path="Void"/></f></setEmpty>
		<transform public="1" set="method" line="171"><f a="m">
	<c path="neash.geom.Matrix"/>
	<c path="neash.geom.Rectangle"/>
</f></transform>
		<union public="1" set="method" line="203"><f a="toUnion">
	<c path="neash.geom.Rectangle"/>
	<c path="neash.geom.Rectangle"/>
</f></union>
		<nmeGetBottom set="method" line="218">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBottom>
		<nmeSetBottom set="method" line="219">
			<f a="b">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBottom>
		<nmeGetBottomRight set="method" line="220">
			<f a=""><c path="neash.geom.Point"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBottomRight>
		<nmeSetBottomRight set="method" line="221">
			<f a="p">
				<c path="neash.geom.Point"/>
				<c path="neash.geom.Point"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBottomRight>
		<nmeGetLeft set="method" line="222">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetLeft>
		<nmeSetLeft set="method" line="223">
			<f a="l">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetLeft>
		<nmeGetRight set="method" line="224">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetRight>
		<nmeSetRight set="method" line="225">
			<f a="r">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetRight>
		<nmeGetSize set="method" line="226">
			<f a=""><c path="neash.geom.Point"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetSize>
		<nmeSetSize set="method" line="227">
			<f a="p">
				<c path="neash.geom.Point"/>
				<c path="neash.geom.Point"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetSize>
		<nmeGetTop set="method" line="228">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTop>
		<nmeSetTop set="method" line="229">
			<f a="t">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTop>
		<nmeGetTopLeft set="method" line="230">
			<f a=""><c path="neash.geom.Point"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTopLeft>
		<nmeSetTopLeft set="method" line="231">
			<f a="p">
				<c path="neash.geom.Point"/>
				<c path="neash.geom.Point"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTopLeft>
		<new public="1" set="method" line="43"><f a="?inX:?inY:?inWidth:?inHeight">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.geom.Transform" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/geom/Transform.hx">
		<colorTransform public="1" get="nmeGetColorTransform" set="nmeSetColorTransform"><c path="neash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" get="nmeGetConcatenatedColorTransform" set="null"><c path="neash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" get="nmeGetConcatenatedMatrix" set="null"><c path="neash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1" get="nmeGetMatrix" set="nmeSetMatrix"><c path="neash.geom.Matrix"/></matrix>
		<pixelBounds public="1" get="nmeGetPixelBounds" set="null"><c path="neash.geom.Rectangle"/></pixelBounds>
		<nmeObj>
			<c path="neash.display.DisplayObject"/>
			<haxe_doc> @private </haxe_doc>
		</nmeObj>
		<nmeGetColorTransform set="method" line="30">
			<f a=""><c path="neash.geom.ColorTransform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetColorTransform>
		<nmeSetColorTransform set="method" line="31">
			<f a="inTrans">
				<c path="neash.geom.ColorTransform"/>
				<c path="neash.geom.ColorTransform"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetColorTransform>
		<nmeGetConcatenatedColorTransform set="method" line="32">
			<f a=""><c path="neash.geom.ColorTransform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetConcatenatedColorTransform>
		<nmeGetConcatenatedMatrix set="method" line="33">
			<f a=""><c path="neash.geom.Matrix"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetConcatenatedMatrix>
		<nmeGetMatrix set="method" line="34">
			<f a=""><c path="neash.geom.Matrix"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMatrix>
		<nmeSetMatrix set="method" line="35">
			<f a="inMatrix">
				<c path="neash.geom.Matrix"/>
				<c path="neash.geom.Matrix"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMatrix>
		<nmeGetPixelBounds set="method" line="36">
			<f a=""><c path="neash.geom.Rectangle"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetPixelBounds>
		<new public="1" set="method" line="19"><f a="inParent">
	<c path="neash.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.media.ID3Info" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/media/ID3Info.hx">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method" line="16"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="neash.media.Sound" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/media/Sound.hx">
		<extends path="neash.events.EventDispatcher"/>
		<nme_sound_from_file line="167" static="1"><f a=":">
	<c path="String"/>
	<e path="Bool"/>
	<unknown/>
</f></nme_sound_from_file>
		<nme_sound_get_id3 line="168" static="1"><f a=":">
	<d/>
	<c path="neash.media.ID3Info"/>
	<unknown/>
</f></nme_sound_get_id3>
		<nme_sound_get_length line="169" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_get_length>
		<nme_sound_close line="170" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_close>
		<nme_sound_get_status line="171" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_get_status>
		<nme_sound_channel_create_dynamic line="172" static="1"><f a=":">
	<c path="neash.utils.ByteArray"/>
	<c path="neash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_create_dynamic>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<id3 public="1" get="nmeGetID3" set="null"><c path="neash.media.ID3Info"/></id3>
		<isBuffering public="1" get="nmeGetIsBuffering" set="null"><e path="Bool"/></isBuffering>
		<length public="1" get="nmeGetLength" set="null"><c path="Float"/></length>
		<url public="1" set="null"><c path="String"/></url>
		<nmeHandle>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<nmeLoading>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeLoading>
		<nmeDynamicSound>
			<e path="Bool"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDynamicSound>
		<addEventListener public="1" set="method" line="37" override="1"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<t path="neash.events.Function"/>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
		<close public="1" set="method" line="51"><f a=""><e path="Void"/></f></close>
		<load public="1" set="method" line="60"><f a="stream:?context:?forcePlayAsMusic">
	<c path="neash.net.URLRequest"/>
	<c path="neash.media.SoundLoaderContext"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></load>
		<nmeCheckLoading set="method" line="78">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeCheckLoading>
		<nmeOnError set="method" line="96">
			<f a="msg">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnError>
		<play public="1" set="method" line="104"><f a="?startTime:?loops:?sndTransform">
	<c path="Float"/>
	<c path="Int"/>
	<c path="neash.media.SoundTransform"/>
	<c path="neash.media.SoundChannel"/>
</f></play>
		<nmeGetID3 set="method" line="136">
			<f a=""><c path="neash.media.ID3Info"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetID3>
		<nmeGetIsBuffering set="method" line="147">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetIsBuffering>
		<nmeGetLength set="method" line="154">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetLength>
		<new public="1" set="method" line="27"><f a="?stream:?context:?forcePlayAsMusic">
	<c path="neash.net.URLRequest"/>
	<c path="neash.media.SoundLoaderContext"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.media.SoundChannel" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/media/SoundChannel.hx">
		<extends path="neash.events.EventDispatcher"/>
		<nmeDynamicSoundCount public="1" line="18" static="1"><c path="Int"/></nmeDynamicSoundCount>
		<nmeIncompleteList line="20" static="1"><c path="Array"><c path="neash.media.SoundChannel"/></c></nmeIncompleteList>
		<createDynamic public="1" set="method" line="43" static="1"><f a="inSoundHandle:sndTransform:dataProvider">
	<d/>
	<c path="neash.media.SoundTransform"/>
	<c path="neash.events.EventDispatcher"/>
	<c path="neash.media.SoundChannel"/>
</f></createDynamic>
		<nmeCompletePending public="1" set="method" line="84" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeCompletePending>
		<nmePollComplete public="1" set="method" line="90" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmePollComplete>
		<nme_sound_channel_is_complete line="150" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_sound_channel_is_complete>
		<nme_sound_channel_get_left line="151" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_left>
		<nme_sound_channel_get_right line="152" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_right>
		<nme_sound_channel_get_position line="153" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_position>
		<nme_sound_channel_get_data_position line="154" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_sound_channel_get_data_position>
		<nme_sound_channel_stop line="155" static="1"><f a="">
	<d/>
	<unknown/>
</f></nme_sound_channel_stop>
		<nme_sound_channel_create line="156" static="1"><f a=":::">
	<d/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="neash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_create>
		<nme_sound_channel_set_transform line="157" static="1"><f a=":">
	<d/>
	<c path="neash.media.SoundTransform"/>
	<unknown/>
</f></nme_sound_channel_set_transform>
		<nme_sound_channel_needs_data line="158" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_sound_channel_needs_data>
		<nme_sound_channel_add_data line="159" static="1"><f a=":">
	<d/>
	<c path="neash.utils.ByteArray"/>
	<unknown/>
</f></nme_sound_channel_add_data>
		<leftPeak public="1" get="nmeGetLeft" set="null"><c path="Float"/></leftPeak>
		<rightPeak public="1" get="nmeGetRight" set="null"><c path="Float"/></rightPeak>
		<position public="1" get="nmeGetPosition" set="null"><c path="Float"/></position>
		<soundTransform public="1" get="nmeGetTransform" set="nmeSetTransform"><c path="neash.media.SoundTransform"/></soundTransform>
		<nmeHandle>
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<nmeTransform>
			<c path="neash.media.SoundTransform"/>
			<haxe_doc> @private </haxe_doc>
		</nmeTransform>
		<nmeDataProvider public="1">
			<c path="neash.events.EventDispatcher"/>
			<haxe_doc> @private </haxe_doc>
		</nmeDataProvider>
		<nmeCheckComplete set="method" line="56">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeCheckComplete>
		<stop public="1" set="method" line="109"><f a=""><e path="Void"/></f></stop>
		<nmeGetLeft set="method" line="120">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetLeft>
		<nmeGetRight set="method" line="121">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetRight>
		<nmeGetPosition set="method" line="122">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetPosition>
		<nmeGetTransform set="method" line="125">
			<f a=""><c path="neash.media.SoundTransform"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTransform>
		<nmeSetTransform set="method" line="136">
			<f a="inTransform">
				<c path="neash.media.SoundTransform"/>
				<c path="neash.media.SoundTransform"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTransform>
		<new public="1" set="method" line="27"><f a="inSoundHandle:startTime:loops:sndTransform">
	<d/>
	<c path="Float"/>
	<c path="Int"/>
	<c path="neash.media.SoundTransform"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.media.SoundLoaderContext" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/media/SoundLoaderContext.hx"><new public="1" set="method" line="7"><f a=""><e path="Void"/></f></new></class>
	<class path="neash.media.SoundTransform" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/media/SoundTransform.hx">
		<pan public="1"><c path="Float"/></pan>
		<volume public="1"><c path="Float"/></volume>
		<clone public="1" set="method" line="18"><f a=""><c path="neash.media.SoundTransform"/></f></clone>
		<new public="1" set="method" line="11"><f a="?vol:?panning">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.net.URLLoader" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/net/URLLoader.hx">
		<extends path="neash.events.EventDispatcher"/>
		<activeLoaders line="39" static="1">
			<c path="List"><c path="neash.net.URLLoader"/></c>
			<haxe_doc> @private </haxe_doc>
		</activeLoaders>
		<urlInvalid get="inline" set="null" line="40" static="1"><c path="Int"/></urlInvalid>
		<urlInit get="inline" set="null" line="41" static="1"><c path="Int"/></urlInit>
		<urlLoading get="inline" set="null" line="42" static="1"><c path="Int"/></urlLoading>
		<urlComplete get="inline" set="null" line="43" static="1"><c path="Int"/></urlComplete>
		<urlError get="inline" set="null" line="44" static="1"><c path="Int"/></urlError>
		<hasActive public="1" set="method" line="76" static="1"><f a=""><e path="Bool"/></f></hasActive>
		<initialize public="1" set="method" line="82" static="1"><f a="inCACertFilePath">
	<c path="String"/>
	<e path="Void"/>
</f></initialize>
		<nmeLoadPending public="1" set="method" line="145" static="1">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeLoadPending>
		<nmePollData public="1" set="method" line="151" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmePollData>
		<nme_curl_create line="238" static="1"><f a="">
	<c path="neash.net.URLRequest"/>
	<unknown/>
</f></nme_curl_create>
		<nme_curl_process_loaders line="239" static="1"><f a=""><unknown/></f></nme_curl_process_loaders>
		<nme_curl_update_loader line="240" static="1"><f a=":">
	<d/>
	<c path="neash.net.URLLoader"/>
	<unknown/>
</f></nme_curl_update_loader>
		<nme_curl_get_code line="241" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_curl_get_code>
		<nme_curl_get_error_message line="242" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_curl_get_error_message>
		<nme_curl_get_data line="243" static="1"><f a="">
	<d/>
	<c path="neash.utils.ByteArray"/>
</f></nme_curl_get_data>
		<nme_curl_get_cookies line="244" static="1"><f a="">
	<d/>
	<c path="Array"><c path="String"/></c>
</f></nme_curl_get_cookies>
		<nme_curl_initialize line="245" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></nme_curl_initialize>
		<bytesLoaded public="1" set="null"><c path="Int"/></bytesLoaded>
		<bytesTotal public="1" set="null"><c path="Int"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="neash.net.URLLoaderDataFormat"/></dataFormat>
		<nmeHandle public="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</nmeHandle>
		<state>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</state>
		<nmeOnComplete public="1">
			<f a="">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeOnComplete>
		<close public="1" set="method" line="64"><f a=""><e path="Void"/></f></close>
		<getCookies public="1" set="method" line="70"><f a=""><c path="Array"><c path="String"/></c></f></getCookies>
		<load public="1" set="method" line="88"><f a="request">
	<c path="neash.net.URLRequest"/>
	<e path="Void"/>
</f></load>
		<nmeDataComplete set="method" line="127">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeDataComplete>
		<onError set="method" line="168">
			<f a="msg">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</onError>
		<dispatchHTTPStatus set="method" line="174">
			<f a="code">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</dispatchHTTPStatus>
		<update set="method" line="178">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</update>
		<new public="1" set="method" line="51"><f a="?request">
	<c path="neash.net.URLRequest"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
* @author   Hugh Sanderson
* @author   Niel Drummond
* @author   Russell Weir
* @author   Joshua Harlan Lifton
* @todo open event
* @todo Complete Variables type
</haxe_doc>
	</class>
	<enum path="neash.net.URLLoaderDataFormat" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/net/URLLoaderDataFormat.hx">
		<VARIABLES/>
		<TEXT/>
		<BINARY/>
	</enum>
	<class path="neash.net.URLRequest" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/net/URLRequest.hx">
		<AUTH_BASIC public="1" get="inline" set="null" line="9" static="1"><c path="Int"/></AUTH_BASIC>
		<AUTH_DIGEST public="1" get="inline" set="null" line="10" static="1"><c path="Int"/></AUTH_DIGEST>
		<AUTH_GSSNEGOTIATE public="1" get="inline" set="null" line="11" static="1"><c path="Int"/></AUTH_GSSNEGOTIATE>
		<AUTH_NTLM public="1" get="inline" set="null" line="12" static="1"><c path="Int"/></AUTH_NTLM>
		<AUTH_DIGEST_IE public="1" get="inline" set="null" line="13" static="1"><c path="Int"/></AUTH_DIGEST_IE>
		<AUTH_DIGEST_ANY public="1" get="inline" set="null" line="14" static="1"><c path="Int"/></AUTH_DIGEST_ANY>
		<authType public="1"><c path="Int"/></authType>
		<cookieString public="1"><c path="String"/></cookieString>
		<url public="1"><c path="String"/></url>
		<userPassword public="1"><c path="String"/></userPassword>
		<verbose public="1"><e path="Bool"/></verbose>
		<method public="1"><c path="String"/></method>
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<nmeBytes public="1">
			<c path="neash.utils.ByteArray"/>
			<haxe_doc>
	 * @private
	 </haxe_doc>
		</nmeBytes>
		<basicAuth public="1" set="method" line="44"><f a="inUser:inPasswd">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></basicAuth>
		<digestAuth public="1" set="method" line="51"><f a="inUser:inPasswd">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></digestAuth>
		<nmePrepare public="1" set="method" line="58">
			<f a=""><e path="Void"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmePrepare>
		<new public="1" set="method" line="31"><f a="?inURL">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.net.URLRequestMethod" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/net/URLRequestMethod.hx">
		<DELETE public="1" get="inline" set="null" line="6" static="1"><c path="String"/></DELETE>
		<GET public="1" get="inline" set="null" line="7" static="1"><c path="String"/></GET>
		<HEAD public="1" get="inline" set="null" line="8" static="1"><c path="String"/></HEAD>
		<OPTIONS public="1" get="inline" set="null" line="9" static="1"><c path="String"/></OPTIONS>
		<POST public="1" get="inline" set="null" line="10" static="1"><c path="String"/></POST>
		<PUT public="1" get="inline" set="null" line="11" static="1"><c path="String"/></PUT>
	</class>
	<class path="neash.net.URLVariables" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/net/URLVariables.hx">
		<decode public="1" set="method" line="12"><f a="inVars">
	<c path="String"/>
	<e path="Void"/>
</f></decode>
		<toString public="1" set="method" line="29"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="6"><f a="?inEncoded">
	<c path="String"/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="neash.text.AntiAliasType" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/AntiAliasType.hx">
		<NORMAL/>
		<ADVANCED/>
	</enum>
	<class path="neash.text.Font" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/Font.hx">
		<load public="1" set="method" line="24" static="1"><f a="inFilename">
	<c path="String"/>
	<t path="neash.text.NativeFontData"/>
</f></load>
		<freetype_import_font line="41" static="1"><f a="::">
	<c path="String"/>
	<unknown/>
	<c path="Int"/>
	<t path="neash.text.NativeFontData"/>
</f></freetype_import_font>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<fontStyle public="1" set="null"><e path="neash.text.FontStyle"/></fontStyle>
		<fontType public="1" set="null"><e path="neash.text.FontType"/></fontType>
		<new public="1" set="method" line="16"><f a="inFilename">
	<c path="String"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="neash.text.NativeFontData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/Font.hx" module="neash.text.Font"><a>
	<style_name><c path="String"/></style_name>
	<num_glyphs><c path="Int"/></num_glyphs>
	<kerning><c path="Array"><t path="neash.text.NativeKerningData"/></c></kerning>
	<is_italic><e path="Bool"/></is_italic>
	<is_fixed_width><e path="Bool"/></is_fixed_width>
	<is_bold><e path="Bool"/></is_bold>
	<height><c path="Int"/></height>
	<has_kerning><e path="Bool"/></has_kerning>
	<has_glyph_names><e path="Bool"/></has_glyph_names>
	<glyphs><c path="Array"><t path="neash.text.NativeGlyphData"/></c></glyphs>
	<family_name><c path="String"/></family_name>
	<em_size><c path="Int"/></em_size>
	<descend><c path="Int"/></descend>
	<ascend><c path="Int"/></ascend>
</a></typedef>
	<typedef path="neash.text.NativeGlyphData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/Font.hx" module="neash.text.Font"><a>
	<points><c path="Array"><c path="Int"/></c></points>
	<min_y><c path="Int"/></min_y>
	<min_x><c path="Int"/></min_x>
	<max_y><c path="Int"/></max_y>
	<max_x><c path="Int"/></max_x>
	<char_code><c path="Int"/></char_code>
	<advance><c path="Int"/></advance>
</a></typedef>
	<typedef path="neash.text.NativeKerningData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/Font.hx" module="neash.text.Font"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
	<right_glyph><c path="Int"/></right_glyph>
	<left_glyph><c path="Int"/></left_glyph>
</a></typedef>
	<enum path="neash.text.FontStyle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/FontStyle.hx">
		<REGULAR/>
		<ITALIC/>
		<BOLD_ITALIC/>
		<BOLD/>
	</enum>
	<enum path="neash.text.FontType" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/FontType.hx">
		<EMBEDDED_CFF/>
		<EMBEDDED/>
		<DEVICE/>
	</enum>
	<class path="neash.text.TextField" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/TextField.hx">
		<extends path="neash.display.InteractiveObject"/>
		<nme_text_field_create line="128" static="1"><f a=""><unknown/></f></nme_text_field_create>
		<nme_text_field_get_text line="129" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_text>
		<nme_text_field_set_text line="130" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_text>
		<nme_text_field_get_html_text line="131" static="1"><f a="">
	<d/>
	<c path="String"/>
</f></nme_text_field_get_html_text>
		<nme_text_field_set_html_text line="132" static="1"><f a=":">
	<d/>
	<c path="String"/>
	<unknown/>
</f></nme_text_field_set_html_text>
		<nme_text_field_get_text_color line="133" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_text_color>
		<nme_text_field_set_text_color line="134" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_color>
		<nme_text_field_get_selectable line="135" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_selectable>
		<nme_text_field_set_selectable line="136" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_selectable>
		<nme_text_field_get_display_as_password line="137" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_display_as_password>
		<nme_text_field_set_display_as_password line="138" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_display_as_password>
		<nme_text_field_get_def_text_format line="139" static="1"><f a=":">
	<d/>
	<c path="neash.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_get_def_text_format>
		<nme_text_field_set_def_text_format line="140" static="1"><f a=":">
	<d/>
	<c path="neash.text.TextFormat"/>
	<unknown/>
</f></nme_text_field_set_def_text_format>
		<nme_text_field_get_auto_size line="141" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_auto_size>
		<nme_text_field_set_auto_size line="142" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_auto_size>
		<nme_text_field_get_type line="143" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_type>
		<nme_text_field_set_type line="144" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_type>
		<nme_text_field_get_multiline line="145" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_multiline>
		<nme_text_field_set_multiline line="146" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_multiline>
		<nme_text_field_get_word_wrap line="147" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_word_wrap>
		<nme_text_field_set_word_wrap line="148" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_word_wrap>
		<nme_text_field_get_border line="149" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_border>
		<nme_text_field_set_border line="150" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_border>
		<nme_text_field_get_border_color line="151" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_border_color>
		<nme_text_field_set_border_color line="152" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_border_color>
		<nme_text_field_get_background line="153" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></nme_text_field_get_background>
		<nme_text_field_set_background line="154" static="1"><f a=":">
	<d/>
	<e path="Bool"/>
	<unknown/>
</f></nme_text_field_set_background>
		<nme_text_field_get_background_color line="155" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_background_color>
		<nme_text_field_set_background_color line="156" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_background_color>
		<nme_text_field_get_text_width line="157" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_text_field_get_text_width>
		<nme_text_field_get_text_height line="158" static="1"><f a="">
	<d/>
	<c path="Float"/>
</f></nme_text_field_get_text_height>
		<nme_text_field_set_text_format line="159" static="1"><f a=":::">
	<d/>
	<c path="neash.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_text_format>
		<nme_text_field_get_max_scroll_v line="160" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_scroll_v>
		<nme_text_field_get_max_scroll_h line="161" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_scroll_h>
		<nme_text_field_get_bottom_scroll_v line="162" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_bottom_scroll_v>
		<nme_text_field_get_scroll_h line="163" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_scroll_h>
		<nme_text_field_set_scroll_h line="164" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_h>
		<nme_text_field_get_scroll_v line="165" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_scroll_v>
		<nme_text_field_set_scroll_v line="166" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_scroll_v>
		<nme_text_field_get_num_lines line="167" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_num_lines>
		<nme_text_field_get_max_chars line="168" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></nme_text_field_get_max_chars>
		<nme_text_field_set_max_chars line="169" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></nme_text_field_set_max_chars>
		<nme_text_field_get_line_text line="170" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<c path="String"/>
</f></nme_text_field_get_line_text>
		<nme_text_field_get_line_offset line="171" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
</f></nme_text_field_get_line_offset>
		<antiAliasType public="1"><e path="neash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1" get="nmeGetAutoSize" set="nmeSetAutoSize"><e path="neash.text.TextFieldAutoSize"/></autoSize>
		<background public="1" get="nmeGetBackground" set="nmeSetBackground"><e path="Bool"/></background>
		<backgroundColor public="1" get="nmeGetBackgroundColor" set="nmeSetBackgroundColor"><c path="Int"/></backgroundColor>
		<border public="1" get="nmeGetBorder" set="nmeSetBorder"><e path="Bool"/></border>
		<borderColor public="1" get="nmeGetBorderColor" set="nmeSetBorderColor"><c path="Int"/></borderColor>
		<bottomScrollV public="1" get="nmeGetBottomScrollV" set="null"><c path="Int"/></bottomScrollV>
		<defaultTextFormat public="1" get="nmeGetDefaultTextFormat" set="nmeSetDefaultTextFormat"><c path="neash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1" get="nmeGetDisplayAsPassword" set="nmeSetDisplayAsPassword"><e path="Bool"/></displayAsPassword>
		<embedFonts public="1" get="nmeGetEmbedFonts" set="nmeSetEmbedFonts"><e path="Bool"/></embedFonts>
		<htmlText public="1" get="nmeGetHTMLText" set="nmeSetHTMLText"><c path="String"/></htmlText>
		<maxChars public="1" get="nmeGetMaxChars" set="nmeSetMaxChars"><c path="Int"/></maxChars>
		<maxScrollH public="1" get="nmeGetMaxScrollH" set="null"><c path="Int"/></maxScrollH>
		<maxScrollV public="1" get="nmeGetMaxScrollV" set="null"><c path="Int"/></maxScrollV>
		<multiline public="1" get="nmeGetMultiline" set="nmeSetMultiline"><e path="Bool"/></multiline>
		<numLines public="1" get="nmeGetNumLines" set="null"><c path="Int"/></numLines>
		<scrollH public="1" get="nmeGetScrollH" set="nmeSetScrollH"><c path="Int"/></scrollH>
		<scrollV public="1" get="nmeGetScrollV" set="nmeSetScrollV"><c path="Int"/></scrollV>
		<selectable public="1" get="nmeGetSelectable" set="nmeSetSelectable"><e path="Bool"/></selectable>
		<text public="1" get="nmeGetText" set="nmeSetText"><c path="String"/></text>
		<textColor public="1" get="nmeGetTextColor" set="nmeSetTextColor"><c path="Int"/></textColor>
		<textHeight public="1" get="nmeGetTextHeight" set="null"><c path="Float"/></textHeight>
		<textWidth public="1" get="nmeGetTextWidth" set="null"><c path="Float"/></textWidth>
		<type public="1" get="nmeGetType" set="nmeSetType"><e path="neash.text.TextFieldType"/></type>
		<wordWrap public="1" get="nmeGetWordWrap" set="nmeSetWordWrap"><e path="Bool"/></wordWrap>
		<appendText public="1" set="method" line="46"><f a="newText">
	<c path="String"/>
	<e path="Void"/>
</f></appendText>
		<setSelection public="1" set="method" line="52"><f a="beginIndex:endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method" line="59"><f a="format:?beginIndex:?endIndex">
	<c path="neash.text.TextFormat"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setTextFormat>
		<getLineOffset public="1" set="method" line="64"><f a="lineIndex">
	<c path="Int"/>
	<c path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method" line="69"><f a="lineIndex">
	<c path="Int"/>
	<c path="String"/>
</f></getLineText>
		<nmeGetAutoSize set="method" line="79">
			<f a=""><e path="neash.text.TextFieldAutoSize"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetAutoSize>
		<nmeSetAutoSize set="method" line="80">
			<f a="inVal">
				<e path="neash.text.TextFieldAutoSize"/>
				<e path="neash.text.TextFieldAutoSize"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetAutoSize>
		<nmeGetBackground set="method" line="81">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBackground>
		<nmeSetBackground set="method" line="82">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBackground>
		<nmeGetBackgroundColor set="method" line="83">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBackgroundColor>
		<nmeSetBackgroundColor set="method" line="84">
			<f a="inVal">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBackgroundColor>
		<nmeGetBorder set="method" line="85">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBorder>
		<nmeSetBorder set="method" line="86">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBorder>
		<nmeGetBorderColor set="method" line="87">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBorderColor>
		<nmeSetBorderColor set="method" line="88">
			<f a="inVal">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetBorderColor>
		<nmeGetBottomScrollV set="method" line="89">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBottomScrollV>
		<nmeGetDefaultTextFormat set="method" line="90">
			<f a=""><c path="neash.text.TextFormat"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetDefaultTextFormat>
		<nmeSetDefaultTextFormat set="method" line="91">
			<f a="inFormat">
				<c path="neash.text.TextFormat"/>
				<c path="neash.text.TextFormat"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetDefaultTextFormat>
		<nmeGetDisplayAsPassword set="method" line="92">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetDisplayAsPassword>
		<nmeSetDisplayAsPassword set="method" line="93">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetDisplayAsPassword>
		<nmeGetEmbedFonts set="method" line="94">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetEmbedFonts>
		<nmeSetEmbedFonts set="method" line="95">
			<f a="value">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetEmbedFonts>
		<nmeGetHTMLText set="method" line="96">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetHTMLText>
		<nmeSetHTMLText set="method" line="97">
			<f a="inText">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetHTMLText>
		<nmeGetMaxChars set="method" line="98">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMaxChars>
		<nmeSetMaxChars set="method" line="99">
			<f a="inVal">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMaxChars>
		<nmeGetMaxScrollH set="method" line="100">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMaxScrollH>
		<nmeGetMaxScrollV set="method" line="101">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMaxScrollV>
		<nmeGetMultiline set="method" line="102">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetMultiline>
		<nmeSetMultiline set="method" line="103">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetMultiline>
		<nmeGetNumLines set="method" line="104">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetNumLines>
		<nmeGetScrollH set="method" line="105">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScrollH>
		<nmeSetScrollH set="method" line="106">
			<f a="inVal">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScrollH>
		<nmeGetScrollV set="method" line="107">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetScrollV>
		<nmeSetScrollV set="method" line="108">
			<f a="inVal">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetScrollV>
		<nmeGetSelectable set="method" line="109">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetSelectable>
		<nmeSetSelectable set="method" line="110">
			<f a="inSel">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetSelectable>
		<nmeGetText set="method" line="111">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetText>
		<nmeSetText set="method" line="112">
			<f a="inText">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetText>
		<nmeGetTextColor set="method" line="113">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTextColor>
		<nmeSetTextColor set="method" line="114">
			<f a="inCol">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetTextColor>
		<nmeGetTextWidth set="method" line="115">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTextWidth>
		<nmeGetTextHeight set="method" line="116">
			<f a=""><c path="Float"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetTextHeight>
		<nmeGetType set="method" line="117">
			<f a=""><e path="neash.text.TextFieldType"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetType>
		<nmeSetType set="method" line="118">
			<f a="inType">
				<e path="neash.text.TextFieldType"/>
				<e path="neash.text.TextFieldType"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetType>
		<nmeGetWordWrap set="method" line="119">
			<f a=""><e path="Bool"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetWordWrap>
		<nmeSetWordWrap set="method" line="120">
			<f a="inVal">
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetWordWrap>
		<new public="1" set="method" line="39"><f a=""><e path="Void"/></f></new>
	</class>
	<enum path="neash.text.TextFieldAutoSize" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/TextFieldAutoSize.hx">
		<RIGHT/>
		<NONE/>
		<LEFT/>
		<CENTER/>
	</enum>
	<enum path="neash.text.TextFieldType" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/TextFieldType.hx">
		<INPUT/>
		<DYNAMIC/>
	</enum>
	<class path="neash.text.TextFormat" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/text/TextFormat.hx">
		<align public="1"><t path="Null"><c path="String"/></t></align>
		<blockIndent public="1"><d/></blockIndent>
		<bold public="1"><d/></bold>
		<bullet public="1"><d/></bullet>
		<color public="1"><d/></color>
		<display public="1"><t path="Null"><c path="String"/></t></display>
		<font public="1"><t path="Null"><c path="String"/></t></font>
		<indent public="1"><d/></indent>
		<italic public="1"><d/></italic>
		<kerning public="1"><d/></kerning>
		<leading public="1"><d/></leading>
		<leftMargin public="1"><d/></leftMargin>
		<letterSpacing public="1"><d/></letterSpacing>
		<rightMargin public="1"><d/></rightMargin>
		<size public="1"><d/></size>
		<tabStops public="1"><c path="Array"><c path="Int"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><d/></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method" line="28"><f a="?in_font:?in_size:?in_color:?in_bold:?in_italic:?in_underline:?in_url:?in_target:?in_align:?in_leftMargin:?in_rightMargin:?in_indent:?in_leading">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.ui.Keyboard" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/ui/Keyboard.hx">
		<A public="1" line="7" static="1"><c path="Int"/></A>
		<B public="1" line="8" static="1"><c path="Int"/></B>
		<C public="1" line="9" static="1"><c path="Int"/></C>
		<D public="1" line="10" static="1"><c path="Int"/></D>
		<E public="1" line="11" static="1"><c path="Int"/></E>
		<F public="1" line="12" static="1"><c path="Int"/></F>
		<G public="1" line="13" static="1"><c path="Int"/></G>
		<H public="1" line="14" static="1"><c path="Int"/></H>
		<I public="1" line="15" static="1"><c path="Int"/></I>
		<J public="1" line="16" static="1"><c path="Int"/></J>
		<K public="1" line="17" static="1"><c path="Int"/></K>
		<L public="1" line="18" static="1"><c path="Int"/></L>
		<M public="1" line="19" static="1"><c path="Int"/></M>
		<N public="1" line="20" static="1"><c path="Int"/></N>
		<O public="1" line="21" static="1"><c path="Int"/></O>
		<P public="1" line="22" static="1"><c path="Int"/></P>
		<Q public="1" line="23" static="1"><c path="Int"/></Q>
		<R public="1" line="24" static="1"><c path="Int"/></R>
		<S public="1" line="25" static="1"><c path="Int"/></S>
		<T public="1" line="26" static="1"><c path="Int"/></T>
		<U public="1" line="27" static="1"><c path="Int"/></U>
		<V public="1" line="28" static="1"><c path="Int"/></V>
		<W public="1" line="29" static="1"><c path="Int"/></W>
		<X public="1" line="30" static="1"><c path="Int"/></X>
		<Y public="1" line="31" static="1"><c path="Int"/></Y>
		<Z public="1" line="32" static="1"><c path="Int"/></Z>
		<ALTERNATE public="1" line="34" static="1"><c path="Int"/></ALTERNATE>
		<BACKQUOTE public="1" line="35" static="1"><c path="Int"/></BACKQUOTE>
		<BACKSLASH public="1" line="36" static="1"><c path="Int"/></BACKSLASH>
		<BACKSPACE public="1" line="37" static="1"><c path="Int"/></BACKSPACE>
		<CAPS_LOCK public="1" line="38" static="1"><c path="Int"/></CAPS_LOCK>
		<COMMA public="1" line="39" static="1"><c path="Int"/></COMMA>
		<COMMAND public="1" line="40" static="1"><c path="Int"/></COMMAND>
		<CONTROL public="1" line="41" static="1"><c path="Int"/></CONTROL>
		<DELETE public="1" line="42" static="1"><c path="Int"/></DELETE>
		<DOWN public="1" line="43" static="1"><c path="Int"/></DOWN>
		<END public="1" line="44" static="1"><c path="Int"/></END>
		<ENTER public="1" line="45" static="1"><c path="Int"/></ENTER>
		<EQUAL public="1" line="46" static="1"><c path="Int"/></EQUAL>
		<ESCAPE public="1" line="47" static="1"><c path="Int"/></ESCAPE>
		<F1 public="1" line="48" static="1"><c path="Int"/></F1>
		<F2 public="1" line="49" static="1"><c path="Int"/></F2>
		<F3 public="1" line="50" static="1"><c path="Int"/></F3>
		<F4 public="1" line="51" static="1"><c path="Int"/></F4>
		<F5 public="1" line="52" static="1"><c path="Int"/></F5>
		<F6 public="1" line="53" static="1"><c path="Int"/></F6>
		<F7 public="1" line="54" static="1"><c path="Int"/></F7>
		<F8 public="1" line="55" static="1"><c path="Int"/></F8>
		<F9 public="1" line="56" static="1"><c path="Int"/></F9>
		<F10 public="1" line="57" static="1"><c path="Int"/></F10>
		<F11 public="1" line="58" static="1"><c path="Int"/></F11>
		<F12 public="1" line="59" static="1"><c path="Int"/></F12>
		<F13 public="1" line="60" static="1"><c path="Int"/></F13>
		<F14 public="1" line="61" static="1"><c path="Int"/></F14>
		<F15 public="1" line="62" static="1"><c path="Int"/></F15>
		<HOME public="1" line="63" static="1"><c path="Int"/></HOME>
		<INSERT public="1" line="64" static="1"><c path="Int"/></INSERT>
		<LEFT public="1" line="65" static="1"><c path="Int"/></LEFT>
		<LEFTBRACKET public="1" line="66" static="1"><c path="Int"/></LEFTBRACKET>
		<MINUS public="1" line="67" static="1"><c path="Int"/></MINUS>
		<NUMBER_0 public="1" line="68" static="1"><c path="Int"/></NUMBER_0>
		<NUMBER_1 public="1" line="69" static="1"><c path="Int"/></NUMBER_1>
		<NUMBER_2 public="1" line="70" static="1"><c path="Int"/></NUMBER_2>
		<NUMBER_3 public="1" line="71" static="1"><c path="Int"/></NUMBER_3>
		<NUMBER_4 public="1" line="72" static="1"><c path="Int"/></NUMBER_4>
		<NUMBER_5 public="1" line="73" static="1"><c path="Int"/></NUMBER_5>
		<NUMBER_6 public="1" line="74" static="1"><c path="Int"/></NUMBER_6>
		<NUMBER_7 public="1" line="75" static="1"><c path="Int"/></NUMBER_7>
		<NUMBER_8 public="1" line="76" static="1"><c path="Int"/></NUMBER_8>
		<NUMBER_9 public="1" line="77" static="1"><c path="Int"/></NUMBER_9>
		<NUMPAD public="1" line="78" static="1"><c path="Int"/></NUMPAD>
		<NUMPAD_0 public="1" line="79" static="1"><c path="Int"/></NUMPAD_0>
		<NUMPAD_1 public="1" line="80" static="1"><c path="Int"/></NUMPAD_1>
		<NUMPAD_2 public="1" line="81" static="1"><c path="Int"/></NUMPAD_2>
		<NUMPAD_3 public="1" line="82" static="1"><c path="Int"/></NUMPAD_3>
		<NUMPAD_4 public="1" line="83" static="1"><c path="Int"/></NUMPAD_4>
		<NUMPAD_5 public="1" line="84" static="1"><c path="Int"/></NUMPAD_5>
		<NUMPAD_6 public="1" line="85" static="1"><c path="Int"/></NUMPAD_6>
		<NUMPAD_7 public="1" line="86" static="1"><c path="Int"/></NUMPAD_7>
		<NUMPAD_8 public="1" line="87" static="1"><c path="Int"/></NUMPAD_8>
		<NUMPAD_9 public="1" line="88" static="1"><c path="Int"/></NUMPAD_9>
		<NUMPAD_ADD public="1" line="89" static="1"><c path="Int"/></NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" line="90" static="1"><c path="Int"/></NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" line="91" static="1"><c path="Int"/></NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" line="92" static="1"><c path="Int"/></NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" line="93" static="1"><c path="Int"/></NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" line="94" static="1"><c path="Int"/></NUMPAD_SUBTRACT>
		<PAGE_DOWN public="1" line="95" static="1"><c path="Int"/></PAGE_DOWN>
		<PAGE_UP public="1" line="96" static="1"><c path="Int"/></PAGE_UP>
		<PERIOD public="1" line="97" static="1"><c path="Int"/></PERIOD>
		<QUOTE public="1" line="98" static="1"><c path="Int"/></QUOTE>
		<RIGHT public="1" line="99" static="1"><c path="Int"/></RIGHT>
		<RIGHTBRACKET public="1" line="100" static="1"><c path="Int"/></RIGHTBRACKET>
		<SEMICOLON public="1" line="101" static="1"><c path="Int"/></SEMICOLON>
		<SHIFT public="1" line="102" static="1"><c path="Int"/></SHIFT>
		<SLASH public="1" line="103" static="1"><c path="Int"/></SLASH>
		<SPACE public="1" line="104" static="1"><c path="Int"/></SPACE>
		<TAB public="1" line="105" static="1"><c path="Int"/></TAB>
		<UP public="1" line="106" static="1"><c path="Int"/></UP>
	</class>
	<class path="neash.utils.IDataInput" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/utils/IDataInput.hx" interface="1">
		<bytesAvailable public="1" get="nmeGetBytesAvailable" set="null"><c path="Int"/></bytesAvailable>
		<endian public="1" get="nmeGetEndian" set="nmeSetEndian"><c path="String"/></endian>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="outData:?inOffset:?inLen">
	<c path="neash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readUnsignedByte public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="inLen">
	<c path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<nmeGetBytesAvailable public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBytesAvailable>
		<nmeGetEndian public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetEndian>
		<nmeSetEndian public="1" set="method">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetEndian>
	</class>
	<class path="neash.utils.ByteArray" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/utils/ByteArray.hx">
		<extends path="haxe.io.Bytes"/>
		<implements path="neash.utils.IDataInput"/>
		<bytes static="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</bytes>
		<factory static="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</factory>
		<resize static="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</resize>
		<slen static="1">
			<d/>
			<haxe_doc> @private </haxe_doc>
		</slen>
		<fromBytes public="1" set="method" line="154" static="1"><f a="inBytes">
	<c path="haxe.io.Bytes"/>
	<c path="neash.utils.ByteArray"/>
</f></fromBytes>
		<readFile public="1" set="method" line="246" static="1"><f a="inString">
	<c path="String"/>
	<c path="neash.utils.ByteArray"/>
</f></readFile>
		<_double_bytes line="506" static="1">
			<f a=":">
				<c path="Float"/>
				<e path="Bool"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</_double_bytes>
		<_double_of_bytes line="507" static="1">
			<f a=":">
				<t path="haxe.io.BytesData"/>
				<e path="Bool"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</_double_of_bytes>
		<_float_bytes line="508" static="1">
			<f a=":">
				<c path="Float"/>
				<e path="Bool"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</_float_bytes>
		<_float_of_bytes line="509" static="1">
			<f a=":">
				<t path="haxe.io.BytesData"/>
				<e path="Bool"/>
				<c path="Float"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</_float_of_bytes>
		<nme_byte_array_overwrite_file line="512" static="1"><f a=":">
	<c path="String"/>
	<c path="neash.utils.ByteArray"/>
	<unknown/>
</f></nme_byte_array_overwrite_file>
		<nme_byte_array_read_file line="513" static="1"><f a="">
	<c path="String"/>
	<c path="neash.utils.ByteArray"/>
</f></nme_byte_array_read_file>
		<bigEndian public="1"><e path="Bool"/></bigEndian>
		<bytesAvailable public="1" get="nmeGetBytesAvailable" set="null"><c path="Int"/></bytesAvailable>
		<endian public="1" get="nmeGetEndian" set="nmeSetEndian"><c path="String"/></endian>
		<position public="1"><c path="Int"/></position>
		<__get public="1" get="inline" set="null" line="62"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></__get>
		<__set public="1" get="inline" set="null" line="92"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></__set>
		<asString public="1" set="method" line="103"><f a=""><c path="String"/></f></asString>
		<checkData public="1" set="method" line="110"><f a="inLength">
	<c path="Int"/>
	<e path="Void"/>
</f></checkData>
		<compress public="1" set="method" line="117"><f a="?algorithm">
	<c path="String"/>
	<e path="Void"/>
</f></compress>
		<ensureElem set="method" line="134">
			<f a="inSize:inUpdateLenght">
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</ensureElem>
		<push get="inline" set="null" line="166"><f a="inByte">
	<c path="Int"/>
	<e path="Void"/>
</f></push>
		<push_uncheck get="inline" set="null" line="177">
			<f a="inByte">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</push_uncheck>
		<readBoolean public="1" get="inline" set="null" line="187"><f a=""><e path="Bool"/></f></readBoolean>
		<readByte public="1" get="inline" set="null" line="193"><f a=""><c path="Int"/></f></readByte>
		<readMultiByte public="1" get="inline" set="null" line="199"><f a="inLen:charSet">
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readBytes public="1" set="method" line="207"><f a="outData:?inOffset:?inLen">
	<c path="neash.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method" line="229"><f a=""><c path="Float"/></f></readDouble>
		<readFloat public="1" set="method" line="253"><f a=""><c path="Float"/></f></readFloat>
		<readInt public="1" set="method" line="269"><f a=""><c path="Int"/></f></readInt>
		<readShort public="1" set="method" line="279"><f a=""><c path="Int"/></f></readShort>
		<readUnsignedByte public="1" get="inline" set="null" line="288"><f a=""><c path="Int"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method" line="294"><f a=""><c path="Int"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method" line="304"><f a=""><c path="Int"/></f></readUnsignedShort>
		<readUTF public="1" set="method" line="312"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method" line="319"><f a="inLen">
	<c path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<setLength public="1" set="method" line="336"><f a="inLength">
	<c path="Int"/>
	<e path="Void"/>
</f></setLength>
		<ThrowEOFi set="method" line="344">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</ThrowEOFi>
		<uncompress public="1" set="method" line="351"><f a="?algorithm">
	<c path="String"/>
	<e path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method" line="369"><f a="value">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBoolean>
		<writeByte public="1" get="inline" set="null" line="375"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="381"><f a="bytes:?inOffset:?inLength">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method" line="392"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeFile public="1" set="method" line="404"><f a="inString">
	<c path="String"/>
	<e path="Void"/>
</f></writeFile>
		<writeFloat public="1" set="method" line="411"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method" line="422"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeShort public="1" set="method" line="446"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeShort>
		<writeUnsignedInt public="1" set="method" line="462"><f a="value">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUnsignedInt>
		<writeUTF public="1" set="method" line="468"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method" line="480"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeUTFBytes>
		<nmeGetBytesAvailable public="1" set="method" line="496">
			<f a=""><c path="Int"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetBytesAvailable>
		<nmeGetEndian public="1" set="method" line="497">
			<f a=""><c path="String"/></f>
			<haxe_doc> @private </haxe_doc>
		</nmeGetEndian>
		<nmeSetEndian public="1" set="method" line="498">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc> @private </haxe_doc>
		</nmeSetEndian>
		<new public="1" set="method" line="42"><f a="?inSize">
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="neash.utils.Endian" params="" file="/usr/lib/haxe/lib/nme/3,3,3/neash/utils/Endian.hx">
		<BIG_ENDIAN public="1" get="inline" set="null" line="7" static="1"><c path="String"/></BIG_ENDIAN>
		<LITTLE_ENDIAN public="1" get="inline" set="null" line="8" static="1"><c path="String"/></LITTLE_ENDIAN>
	</class>
	<class path="neash.utils.WeakRef" params="T" file="/usr/lib/haxe/lib/nme/3,3,3/neash/utils/WeakRef.hx">
		<nme_weak_ref_create line="59" static="1"><f a=":">
	<c path="neash.utils.WeakRef"><c path="neash.utils.WeakRef.T"/></c>
	<c path="neash.utils.WeakRef.T"/>
	<c path="Int"/>
</f></nme_weak_ref_create>
		<nme_weak_ref_get line="60" static="1"><f a="">
	<c path="Int"/>
	<c path="neash.utils.WeakRef.T"/>
</f></nme_weak_ref_get>
		<hardRef>
			<c path="neash.utils.WeakRef.T"/>
			<haxe_doc> @private </haxe_doc>
		</hardRef>
		<weakRef>
			<c path="Int"/>
			<haxe_doc> @private </haxe_doc>
		</weakRef>
		<get public="1" set="method" line="30"><f a=""><c path="neash.utils.WeakRef.T"/></f></get>
		<toString public="1" set="method" line="45"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="15"><f a="inObject:?inMakeWeak">
	<c path="neash.utils.WeakRef.T"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.Assets" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/Assets.hx"><c path="nme.installer.Assets"/></typedef>
	<typedef path="nme.Lib" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/Lib.hx"><c path="neash.Lib"/></typedef>
	<typedef path="nme.Loader" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/Loader.hx"><c path="neash.Loader"/></typedef>
	<typedef path="nme.display.Bitmap" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Bitmap.hx"><c path="neash.display.Bitmap"/></typedef>
	<typedef path="nme.display.BitmapData" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/BitmapData.hx"><c path="neash.display.BitmapData"/></typedef>
	<typedef path="nme.display.BitmapInt32" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/BitmapInt32.hx"><c path="Int"/></typedef>
	<typedef path="nme.display.DisplayObject" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/DisplayObject.hx"><c path="neash.display.DisplayObject"/></typedef>
	<class path="nme.display.FPS" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/FPS.hx">
		<extends path="neash.text.TextField"/>
		<times><c path="Array"><c path="Float"/></c></times>
		<onEnter set="method" line="38"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></onEnter>
		<new public="1" set="method" line="16"><f a="?inX:?inY:?inCol">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="nme.display.Graphics" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Graphics.hx"><c path="neash.display.Graphics"/></typedef>
	<typedef path="nme.display.Sprite" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Sprite.hx"><c path="neash.display.Sprite"/></typedef>
	<typedef path="nme.display.Stage" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Stage.hx"><c path="neash.display.Stage"/></typedef>
	<typedef path="nme.display.StageAlign" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/StageAlign.hx"><e path="neash.display.StageAlign"/></typedef>
	<typedef path="nme.display.StageScaleMode" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/StageScaleMode.hx"><e path="neash.display.StageScaleMode"/></typedef>
	<typedef path="nme.display.Tilesheet" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/display/Tilesheet.hx"><c path="neash.display.Tilesheet"/></typedef>
	<typedef path="nme.events.Event" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/events/Event.hx"><c path="neash.events.Event"/></typedef>
	<typedef path="nme.events.KeyboardEvent" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/events/KeyboardEvent.hx"><c path="neash.events.KeyboardEvent"/></typedef>
	<typedef path="nme.geom.ColorTransform" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/geom/ColorTransform.hx"><c path="neash.geom.ColorTransform"/></typedef>
	<typedef path="nme.geom.Matrix" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/geom/Matrix.hx"><c path="neash.geom.Matrix"/></typedef>
	<typedef path="nme.geom.Point" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/geom/Point.hx"><c path="neash.geom.Point"/></typedef>
	<typedef path="nme.geom.Rectangle" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/geom/Rectangle.hx"><c path="neash.geom.Rectangle"/></typedef>
	<class path="nme.installer.Assets" params="" file="bin/cpp/linux/haxe/nme/installer/Assets.hx">
		<cachedBitmapData public="1" line="19" static="1"><c path="Hash"><t path="nme.display.BitmapData"/></c></cachedBitmapData>
		<initialized line="21" static="1"><e path="Bool"/></initialized>
		<resourceNames line="22" static="1"><c path="Hash"><c path="String"/></c></resourceNames>
		<resourceTypes line="23" static="1"><c path="Hash"><c path="String"/></c></resourceTypes>
		<initialize set="method" line="26" static="1"><f a=""><e path="Void"/></f></initialize>
		<getBitmapData public="1" set="method" line="40" static="1"><f a="id:?useCache">
	<c path="String"/>
	<e path="Bool"/>
	<t path="nme.display.BitmapData"/>
</f></getBitmapData>
		<getBytes public="1" set="method" line="75" static="1"><f a="id">
	<c path="String"/>
	<t path="nme.utils.ByteArray"/>
</f></getBytes>
		<getFont public="1" set="method" line="94" static="1"><f a="id">
	<c path="String"/>
	<t path="nme.text.Font"/>
</f></getFont>
		<getResourceName public="1" set="method" line="113" static="1"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getResourceName>
		<getSound public="1" set="method" line="122" static="1"><f a="id">
	<c path="String"/>
	<t path="nme.media.Sound"/>
</f></getSound>
		<getText public="1" set="method" line="147" static="1"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<haxe_doc>
 * ...
 * @author Joshua Granick
 </haxe_doc>
	</class>
	<typedef path="nme.media.Sound" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/media/Sound.hx"><c path="neash.media.Sound"/></typedef>
	<typedef path="nme.media.SoundChannel" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/media/SoundChannel.hx"><c path="neash.media.SoundChannel"/></typedef>
	<typedef path="nme.net.URLLoader" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/net/URLLoader.hx"><c path="neash.net.URLLoader"/></typedef>
	<typedef path="nme.net.URLRequest" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/net/URLRequest.hx"><c path="neash.net.URLRequest"/></typedef>
	<typedef path="nme.text.Font" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/text/Font.hx"><c path="neash.text.Font"/></typedef>
	<typedef path="nme.text.TextField" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/text/TextField.hx"><c path="neash.text.TextField"/></typedef>
	<typedef path="nme.text.TextFormat" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/text/TextFormat.hx"><c path="neash.text.TextFormat"/></typedef>
	<typedef path="nme.ui.Keyboard" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/ui/Keyboard.hx"><c path="neash.ui.Keyboard"/></typedef>
	<typedef path="nme.utils.ByteArray" params="" file="/usr/lib/haxe/lib/nme/3,3,3/nme/utils/ByteArray.hx"><c path="neash.utils.ByteArray"/></typedef>
	<typedef path="sys.FileStat" params="" file="/usr/lib/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<c path="Int"/>
				<haxe_doc> the user id for the file </haxe_doc>
			</uid>
			<size>
				<c path="Int"/>
				<haxe_doc> the size of the file </haxe_doc>
			</size>
			<rdev><c path="Int"/></rdev>
			<nlink><c path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc> the last modification time for the file </haxe_doc>
			</mtime>
			<mode><c path="Int"/></mode>
			<ino><c path="Int"/></ino>
			<gid><c path="Int"/></gid>
			<dev><c path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc> the creation time for the file </haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc> the last access time for the file (when enabled by the file system) </haxe_doc>
			</atime>
		</a>
		<haxe_doc>
	File informations, as given by [sys.FileSystem.stat]
</haxe_doc>
	</typedef>
	<enum path="sys._FileSystem.FileKind" params="" file="/usr/lib/haxe/std/cpp/_std/sys/FileSystem.hx" private="1" module="sys.FileSystem">
		<kother a="k"><c path="String"/></kother>
		<kfile/>
		<kdir/>
	</enum>
	<class path="sys.FileSystem" params="" file="/usr/lib/haxe/std/cpp/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="36" static="1">
			<f a="path">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the given file or directory exists.
	</haxe_doc>
		</exists>
		<rename public="1" set="method" line="40" static="1">
			<f a="path:newpath">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Rename the corresponding file or directory, allow to move it accross directories as well.
	</haxe_doc>
		</rename>
		<stat public="1" set="method" line="45" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>
		Returns informations for the given file/directory.
	</haxe_doc>
		</stat>
		<fullPath public="1" set="method" line="55" static="1">
			<f a="relpath">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the full path for the given path which is relative to the current working directory.
	</haxe_doc>
		</fullPath>
		<kind set="method" line="59" static="1"><f a="path">
	<c path="String"/>
	<e path="sys._FileSystem.FileKind"/>
</f></kind>
		<isDirectory public="1" set="method" line="68" static="1">
			<f a="path">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the given path is a directory. Throw an exception if it does not exists or is not accesible.
	</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="72" static="1">
			<f a="path">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Create the given directory. Not recursive : the parent directory must exists.
	</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="77" static="1">
			<f a="path">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Delete a given file.
	</haxe_doc>
		</deleteFile>
		<deleteDirectory public="1" set="method" line="82" static="1">
			<f a="path">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Delete a given directory.
	</haxe_doc>
		</deleteDirectory>
		<readDirectory public="1" set="method" line="87" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Read all the files/directories stored into the given directory.
	</haxe_doc>
		</readDirectory>
		<sys_exists line="91" static="1"><f a="">
	<c path="String"/>
	<e path="Bool"/>
</f></sys_exists>
		<file_delete line="92" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></file_delete>
		<sys_rename line="93" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></sys_rename>
		<sys_stat line="94" static="1"><f a="">
	<c path="String"/>
	<t path="sys.FileStat"/>
</f></sys_stat>
		<sys_file_type line="95" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></sys_file_type>
		<sys_create_dir line="96" static="1"><f a=":">
	<c path="String"/>
	<c path="Int"/>
	<unknown/>
</f></sys_create_dir>
		<sys_remove_dir line="97" static="1"><f a="">
	<c path="String"/>
	<unknown/>
</f></sys_remove_dir>
		<sys_read_dir line="98" static="1"><f a="">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</f></sys_read_dir>
		<file_full_path line="99" static="1"><f a="">
	<c path="String"/>
	<c path="String"/>
</f></file_full_path>
		<haxe_doc>
	This class allows you to get informations about the files and directories.
</haxe_doc>
	</class>
	<class path="sys.io.File" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="30" static="1"><f a="path">
	<c path="String"/>
	<c path="String"/>
</f></getContent>
		<getBytes public="1" set="method" line="35" static="1"><f a="path">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<saveContent public="1" set="method" line="40" static="1"><f a="path:content">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></saveContent>
		<saveBytes public="1" set="method" line="46" static="1"><f a="path:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></saveBytes>
		<read public="1" set="method" line="52" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="sys.io.FileInput"/>
</f></read>
		<write public="1" set="method" line="56" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="sys.io.FileOutput"/>
</f></write>
		<append public="1" set="method" line="60" static="1"><f a="path:?binary">
	<c path="String"/>
	<e path="Bool"/>
	<c path="sys.io.FileOutput"/>
</f></append>
		<copy public="1" set="method" line="64" static="1"><f a="src:dst">
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></copy>
		<file_contents line="72" static="1"><f a="">
	<c path="String"/>
	<t path="haxe.io.BytesData"/>
</f></file_contents>
		<file_open line="73" static="1"><f a=":">
	<c path="String"/>
	<c path="String"/>
	<unknown/>
</f></file_open>
		<haxe_doc>
	API for reading and writing to files.
</haxe_doc>
	</class>
	<class path="sys.io.FileInput" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<file_eof line="77" static="1"><f a="">
	<d/>
	<e path="Bool"/>
</f></file_eof>
		<file_read line="79" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_read>
		<file_read_char line="80" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></file_read_char>
		<file_close line="82" static="1"><f a="">
	<d/>
	<unknown/>
</f></file_close>
		<file_seek line="83" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="84" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></file_tell>
		<__f><d/></__f>
		<readByte public="1" set="method" line="37" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="48" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="59" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="64"><f a="p:pos">
	<c path="Int"/>
	<e path="sys.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="68"><f a=""><c path="Int"/></f></tell>
		<eof public="1" set="method" line="73"><f a=""><e path="Bool"/></f></eof>
		<new set="method" line="33"><f a="f">
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [sys.io.File.read] to create a [FileInput]
</haxe_doc>
	</class>
	<class path="sys.io.FileOutput" params="" file="/usr/lib/haxe/std/cpp/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<file_close line="62" static="1"><f a="">
	<d/>
	<unknown/>
</f></file_close>
		<file_seek line="63" static="1"><f a="::">
	<d/>
	<c path="Int"/>
	<c path="Int"/>
	<unknown/>
</f></file_seek>
		<file_tell line="64" static="1"><f a="">
	<d/>
	<c path="Int"/>
</f></file_tell>
		<file_flush line="66" static="1"><f a="">
	<d/>
	<unknown/>
</f></file_flush>
		<file_write line="67" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></file_write>
		<file_write_char line="68" static="1"><f a=":">
	<d/>
	<c path="Int"/>
	<unknown/>
</f></file_write_char>
		<__f><d/></__f>
		<writeByte public="1" set="method" line="37" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="45" override="1"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="49" override="1"><f a=""><e path="Void"/></f></close>
		<seek public="1" set="method" line="54"><f a="p:pos">
	<c path="Int"/>
	<e path="sys.io.FileSeek"/>
	<e path="Void"/>
</f></seek>
		<tell public="1" set="method" line="58"><f a=""><c path="Int"/></f></tell>
		<new set="method" line="33"><f a="f">
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
	Use [sys.io.File.write] to create a [FileOutput]
</haxe_doc>
	</class>
	<enum path="sys.io.FileSeek" params="" file="/usr/lib/haxe/std/sys/io/FileSeek.hx">
		<SeekEnd/>
		<SeekCur/>
		<SeekBegin/>
	</enum>
</haxe>